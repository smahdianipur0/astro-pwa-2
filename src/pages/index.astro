---
import Layout from '../layouts/Layout.astro';
import Generate from '../components/Generate.astro'; 
import Card from '../components/Card.astro';
import Encdec from '../components/Encdec.astro';
import Varification from '../components/Varification.astro';
import GenerateQR from '../components/GenerateQR.astro'; 
import VarificationOnly from '../components/VarificationOnly.astro';
---

<Layout title="Generate and encrypt Passwords">



<div class="tab-content one" > 
  <div style="margin-top: var(--portion);
padding: 1rem;
display: grid;
gap:2ch;
grid-template-columns: repeat(auto-fit, clamp(200px, 350px, 100% ) )  ;
justify-content: center;">
     
	<Card title = "Generate Password" iden='generate'>
		<Generate/>
	</Card>	

	<Card title = "Encryption and Decryption" iden='encryption'>

		<Encdec/>

	</Card>

	<Card title = "Varification Code" iden='varification'>
		<Varification/> 

 	</Card>  
  </div> 
</div>

<div class="tab-content two">
<div style="margin-top: var(--portion);
padding: 1rem;
display: grid;
gap:2ch;
grid-template-columns: repeat(auto-fit, clamp(200px, 350px, 100% ) )  ;
justify-content: center;"> 

	<Card title = "Generate QR Code" iden='generateQR'>
		<GenerateQR/> 

 	</Card> 
</div>
</div>

<div class="tab-content three"> 
<div style="margin-top: var(--portion);
padding: 1rem;
display: grid;
gap:2ch;
grid-template-columns: repeat(auto-fit, clamp(200px, 350px, 100% ) )  ;
justify-content: center;"> 

	<Card title = "Varification Code" iden='varificationOnly'>
		<VarificationOnly/> 

 	</Card> 
</div>
</div>

<div class="tab-content four"> 
    <div>About tab</div>
</div>
    

    




</Layout>

<script src="../components/signals.ts"></script>

<script>
	
const params: URLSearchParams = new URLSearchParams(window.location.search);

function updateURL(): void {
	params.set(
		"theme",
		(document.getElementById("theme-toggle")! as HTMLInputElement).checked.toString(),);

	// params.set(
	// 	"checkbox-two",
	// 	(document.getElementById("bar")! as HTMLInputElement).checked.toString(),);

	window.history.replaceState({}, "", `${window.location.pathname}?${params}`);
}

function getCheckboxState(id: string): boolean {
	return params.get(id) === "true";
}

const checkboxElementOne: HTMLInputElement = document.getElementById(
	"theme-toggle",
) as HTMLInputElement;
checkboxElementOne.checked = getCheckboxState("theme");
checkboxElementOne.addEventListener("change", updateURL);

// const checkboxElementTwo: HTMLInputElement = document.getElementById(
// 	"bar",
// ) as HTMLInputElement;
// checkboxElementTwo.checked = getCheckboxState("checkbox-two");
// checkboxElementTwo.addEventListener("change", updateURL);












function updateURLForRadios(): void {
	if (document.querySelector('input[name="tab"]:checked')) {
		params.set(
			"tab",
			(document.querySelector('input[name="tab"]:checked') as HTMLInputElement)
				.id,
		);
	}
	if (document.querySelector('input[name="another-tab"]:checked')) {
		params.set(
			"another-tab",
			(
				document.querySelector(
					'input[name="another-tab"]:checked',
				) as HTMLInputElement
			).id,
		);
	}

	window.history.replaceState({}, "", `${window.location.pathname}?${params}`);
}

function setInitialRadioStates(): void {
	const tabValue = params.get("tab");

	if (tabValue) {
		const tabRadioToCheck = document.querySelector(
			`input[name="tab"][id="${tabValue}"]`,
		) as HTMLInputElement;
		if (tabRadioToCheck) {
			tabRadioToCheck.checked = true;
		}
	}

	const anotherTabValue = params.get("another-tab");

	if (anotherTabValue) {
		const anotherTabRadioToCheck = document.querySelector(
			`input[name="another-tab"][id="${anotherTabValue}"]`,
		) as HTMLInputElement;
		if (anotherTabRadioToCheck) {
			anotherTabRadioToCheck.checked = true;
		}
	}
}

setInitialRadioStates();

const allTabRadios = document.querySelectorAll('input[name="tab"]');
allTabRadios.forEach((radio) => {
	radio.addEventListener("change", updateURLForRadios);
});

const allAnotherTabRadios = document.querySelectorAll(
	'input[name="another-tab"]',
);
allAnotherTabRadios.forEach((radio) => {
	radio.addEventListener("change", updateURLForRadios);
});




</script>









