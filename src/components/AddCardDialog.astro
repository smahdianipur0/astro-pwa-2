---
import Dialog from './ui/Dialog.astro';
---
<div id="card-menu-div" style="display: flex; flex-direction: row-reverse; align-items: flex-start;height: var(--size-lg1);" >   
  <button id="card-form-button" class="tertiary-btn">
  <svg width="24" height="24" fill="none" style="pointer-events: none;padding: 1px; width: var(--size-sm3);" viewBox="0 0 24 24">
    <path d="M11.75 3a.75.75 0 0 1 .743.648l.007.102.001 7.25h7.253a.75.75 0 0 1 .102 1.493l-.102.007h-7.253l.002 7.25a.75.75 0 0 1-1.493.101l-.007-.102-.002-7.249H3.752a.75.75 0 0 1-.102-1.493L3.752 11h7.25L11 3.75a.75.75 0 0 1 .75-.75Z" />
  </svg>
  <p style="padding-right: var(--size-xs3);pointer-events: none;">Add</p> 
</button>
</div>


<Dialog identifier="card-form" formHandler="return handleCardForm(this, event);">

  <p>
    <label for="select vault">Vault:</label>
    <select name="select vault" class="max-width prose" id="select-vault-for-card" ></select>
  </p>

  <p id= "card-select-field">
    <label for="select card">card:</label>
    <select name="select card" class="max-width prose" id="select-card-list" ></select>
  </p>
  
  <div id="card-fields">
    <textarea name="comments"></textarea>
  </div>
 

  <div id="card-form-add-field" class="not-prose" style="display: flex; flex-direction: row-reverse; align-items: flex-start;height: var(--size-lg1); margin-top: var(--size-xs2);" >   
    <button type="button" id="add-field" class="tertiary-btn">
    <svg width="24" height="24" fill="none" style="pointer-events: none;padding: 1px; width: var(--size-sm3);" viewBox="0 0 24 24">
      <path d="M11.75 3a.75.75 0 0 1 .743.648l.007.102.001 7.25h7.253a.75.75 0 0 1 .102 1.493l-.102.007h-7.253l.002 7.25a.75.75 0 0 1-1.493.101l-.007-.102-.002-7.249H3.752a.75.75 0 0 1-.102-1.493L3.752 11h7.25L11 3.75a.75.75 0 0 1 .75-.75Z" />
    </svg>
    <p style="padding-right: var(--size-xs3);pointer-events: none;">Add</p> 
  </button>
  </div>


  <menu class="flex-center-childs" style="gap:var(--size-sm0);margin-top: var(--size-sm3);">
    <button class="max-width not-prose unstyle-button" type="submit" value="cancel">Cancel</button>
    <button class="max-width" type="submit" value="confirm" id="add-card-button">OK</button>
  </menu>
</Dialog>

<script>

import { element } from "../utils/elementUtils";
import { createEffect } from "solid-js";
import { dbUpserelate, dbReadRelation } from "../utils/surrealdb-indexed"
import { editableVaultList, selectedVault,
         cardsList, setcardsList,
         addCardSelectedVault, setAddCardSelectedVault,
         selectedCard, setSelectedCard,
         cardName, setCardName
          } from "../logic/records";
          
import { customAlphabet } from 'nanoid'
const nanoid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 20)


// initialize addCardSelectedVault
const selectVaultToAddCard = document.getElementById("select-vault-for-card") as HTMLSelectElement;
if (selectVaultToAddCard){ setAddCardSelectedVault(selectVaultToAddCard.options[0]?.value)}

// initialize cardsList
async function updateCardsList(): Promise<void> {
  const initialCardsList = await dbReadRelation("Vaults", "Vaults_has", "Cards", addCardSelectedVault());
  if (initialCardsList) {setcardsList(initialCardsList);}
}

updateCardsList();


// update cardsList
createEffect(() => { (async () => {
    const intialcardsList = await dbReadRelation("Vaults", "Vaults_has", "Cards", addCardSelectedVault());
    if (intialcardsList) {setcardsList(intialcardsList);}
})(); });

// initial handleCardForm
declare global {
    interface Window {
        handleCardForm: (form: HTMLFormElement, event: SubmitEvent) => boolean;
    }
}

const dialog = document.getElementById('card-form') as HTMLDialogElement;
const form   = dialog.querySelector('form')         as HTMLFormElement;


// bind listeners
document.getElementById("card-menu-div")!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#card-form-button")){
        (document.getElementById("card-form") as HTMLDialogElement).showModal();
        const value = selectedVault();
        selectVaultToAddCard.value = 
            Array.from(selectVaultToAddCard.options).some(o => o.value === value) ? value :
            selectVaultToAddCard.options[0]?.value || '';
    };
});

dialog!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#add-field")){
        e.preventDefault();
        const fragment = document.createDocumentFragment();
        fragment.append(element.configure('textarea', {name:"comments"}) );
        document.getElementById("card-fields")!.append(fragment)
        return false
    };
});

dialog!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#select-vault-for-card")){
        setAddCardSelectedVault((e!.target as HTMLInputElement).value.toString());
    };
    if((e!.target as HTMLInputElement).matches("#select-card-list")){
        setSelectedCard((e!.target as HTMLInputElement).value.toString())
    };
    if((e!.target as HTMLInputElement).matches("#new-card-input")){
        setCardName((e!.target as HTMLInputElement).value.toString())
    };
});

// update availible cards to select
createEffect(() => {
    (async () => {
        const selectCardList = document.getElementById("select-card-list") as HTMLInputElement;
        if (!selectCardList) return;

        selectCardList.textContent = "";
        setSelectedCard("");

        selectCardList.disabled = (editableVaultList().length === 0);

        if (editableVaultList().length !== 0) {
            const fragment = document.createDocumentFragment();

            const availableCards = (cardsList() ?? []).filter(item => item.status === "available");
            if (availableCards.length === 0) {
                fragment.append(element.configure("option", { textContent: "New Card" }));
            } else {
                fragment.append(element.configure("option", { textContent: "New Card" }));
                availableCards
                    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
                    .forEach((entry) => {
                        fragment.append(
                            element.configure("option", { textContent: entry.name, id: entry.id?.id })
                        );
                    });
            }

            selectCardList.append(fragment);
        }
    })();
});

// card name input
createEffect(() => {
    const fragment = document.createDocumentFragment();

    if (selectedCard() === "" || selectedCard() === "New Card") {

        const cardInput = document.getElementById("new-card-input") as HTMLInputElement;
        if (cardInput) {cardInput.remove()}

        fragment.append(element.configure("input", {
            style: "margin-top:var(--size-sm1)",
            type: "text", 
            placeholder:"Card Name",
            id:"new-card-input",
            name: "new card"
        }));

        document.getElementById("card-select-field")!.append(fragment)

    } else {
        const cardInput = document.getElementById("new-card-input") as HTMLInputElement;
        if (cardInput) {cardInput.remove()}
    }
});

// ok button disabled
createEffect(() => { 
    (document.getElementById("add-card-button") as HTMLButtonElement).disabled = (selectedCard() === "" && cardName() === "")
});
    
// handle form
window.handleCardForm = (form: HTMLFormElement, event: SubmitEvent): boolean => {
    const action = (event.submitter as HTMLButtonElement)?.value;
  
    if (action === 'cancel') { return true;}
  
    const data = new FormData(form);

    const selectElement = document.getElementById("select-card-list") as HTMLSelectElement;
    const selectedOptionId = selectElement.options[selectElement.selectedIndex].id;

    const id   = ( data.get("select card") === "New Card") ? nanoid() : selectedOptionId;
    const name = ( data.get("select card") === "New Card") ? data.get("new card") as string : data.get("select card") as string ; 

    dbUpserelate("Cards:upserelate", {
        id:id, 
        name:name, 
        status:"available", 
        data: data.getAll('comments') as string[],
        "to:Vaults_has": {
            in: data.get("select vault") as string} 
        });
    updateCardsList();
    return true;
};

// reset the form on close
const initialFormHTML = form.innerHTML;
dialog.addEventListener('close', () => {form.innerHTML = initialFormHTML; });

// await dbReadRelation("Vaults", "Vaults_has", "Cards", "test3")
  

</script>