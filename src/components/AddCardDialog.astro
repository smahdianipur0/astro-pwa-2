<div 
    class="not-prose"
    id="AddCardDialog-div"
    style="display: flex; 
    align-items: flex-end; 
    height: var(--size-lg1);">

    <button id="AddCardDialog-add" class="tertiary-btn"> 

        <svg width="24" height="24"fill="none" style="pointer-events: none; padding: 1px; width: var(--size-sm3);" viewBox="0 0 24 24">
            <path d="M11.75 3a.75.75 0 0 1 .743.648l.007.102.001 7.25h7.253a.75.75 0 0 1 .102 1.493l-.102.007h-7.253l.002 7.25a.75.75 0 0 1-1.493.101l-.007-.102-.002-7.249H3.752a.75.75 0 0 1-.102-1.493L3.752 11h7.25L11 3.75a.75.75 0 0 1 .75-.75Z"/>
        </svg>

        <p style="padding-right: var(--size-xs2); pointer-events: none;"> Add </p>

    </button>

</div>

<dialog id="AddCardDialog">
    <form method="dialog" onsubmit="return handleCardForm(this, event);">    
        <p class="flex-spread-childs">

            <label for="AddCardDialog-vault">Vault:</label>
            <select name="select vault" id="AddCardDialog-vault"></select> 

        </p>

        
        <p class="flex-spread-childs" style="margin-top: 0;" >

            <label for="AddCardDialog-card-select">Card:</label>
            <select name="select card" id="AddCardDialog-card-select"></select>

        </p>
        
        <p id="AddCardDialog-card-field"></p>

        <div id="AddCardDialog-comments">
            <textarea name="comments"></textarea>
        </div>

        <div
            id="AddCardDialog-add-comment-field"
            class="not-prose"
            style="display: flex; 
            flex-direction: row-reverse; 
            align-items: flex-start; 
            height: var(--size-lg1); 
            margin-top: var(--size-xs3);">

            <button
                type="button"
                id="AddCardDialog-add-comment"
                class="tertiary-btn">

            <svg width="24" height="24" fill="none" style="pointer-events: none; padding: 1px; width: var(--size-sm3);" viewBox="0 0 24 24">
                <path d="M11.75 3a.75.75 0 0 1 .743.648l.007.102.001 7.25h7.253a.75.75 0 0 1 .102 1.493l-.102.007h-7.253l.002 7.25a.75.75 0 0 1-1.493.101l-.007-.102-.002-7.249H3.752a.75.75 0 0 1-.102-1.493L3.752 11h7.25L11 3.75a.75.75 0 0 1 .75-.75Z"/>
            </svg>

            <p style="padding-right: var(--size-xs2); pointer-events: none;"> Add</p>

            </button>
        </div>

        <div 
            class="flex-center-childs"
            style="gap: var(--size-sm0); 
            margin-top: var(--size-sm3);">

        <button
            class="max-width not-prose"
            type="submit"
            value="cancel">
            Cancel</button>

        <button
            class="max-width"
            type="submit"
            value="confirm"
            id="AddCardDialog-ok">
            OK</button>
        </div>
    </form>
</dialog>

<script>

import { dbquery, toRecordId, getEntryById } from "../utils/surrealdb-indexed"
import { records } from "../logic/records"       
import { customAlphabet } from 'nanoid'

const nanoid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 20)


// initial handleCardForm
declare global {
    interface Window {
        handleCardForm: (form: HTMLFormElement, event: SubmitEvent) => boolean;
    }
}

const dialog = document.getElementById('AddCardDialog') as HTMLDialogElement;


// bind listeners
document.getElementById("AddCardDialog-div")!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-add")){
        (document.getElementById("AddCardDialog") as HTMLDialogElement).showModal();
    };
});

dialog!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-add-comment")){
        e.preventDefault();
        document.getElementById("AddCardDialog-comments")!.append(
            Object.assign(document.createElement("textarea"), {
                name:"comments"
            }))
        return false
    };
});

dialog!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-vault")){
        records.setSelectedVault((e!.target as HTMLInputElement).value.toString());
    };
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-card-select")){
        records.setSelectedCard((e!.target as HTMLInputElement).value.toString());
        records.setCardName("")
    };
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-card-input")){
        records.setCardName((e!.target as HTMLInputElement).value.toString())
    };
});

// mirror selectedVault
records.on(["selectedVault"], ({value}) => { (async () => {
    if(value !== undefined) {
        const selected = await getEntryById("Vaults", `Vaults:${value}`);
            if (selected?.role === "owner") {
              (document.getElementById("AddCardDialog-vault") as HTMLSelectElement).value = selected.name;  
            }
        }
})()});

//update vault options and Sselected Ccard
records.on(["editableVaultList"], ({value}) => {
    const cardVaultlist = document.getElementById("AddCardDialog-vault") as HTMLSelectElement
    cardVaultlist.textContent = "";

    const options = (value ?? [])
         .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
         .map(entry => { return Object.assign(document.createElement("option"),
            {textContent:entry.name, id:entry.id}
            );
        })
    cardVaultlist.replaceChildren(...options);

    const selectCard = document.getElementById("AddCardDialog-card-select") as HTMLSelectElement;
    if (selectCard){ records.setSelectedCard(selectCard.options[0]?.value)}
});

// update availible cards to select
records.on(["editableVaultList", "cardsList"], pl => {
    (async () => {
        const selectCardList = document.getElementById("AddCardDialog-card-select") as HTMLInputElement;
        if (!selectCardList) return;

        selectCardList.textContent = "";
        records.setSelectedCard("");

        selectCardList.disabled = (records.get("editableVaultList").length === 0);

        if (records.get("editableVaultList").length !== 0) {

            const availableCards = (records.get("cardsList") ?? []).filter(item => item.status === "available")
            
            const options = (availableCards.length !== 0) ? 
                availableCards
                    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
                    .map(entry => { return Object.assign(document.createElement("option"),{
                        textContent: entry.name, id: entry.id
                    })})
                : [];
            const newCard =  (Object.assign(document.createElement("option"), { textContent: "New Card" }))
            
            selectCardList.replaceChildren(newCard, ...options)
                          
        }
    })();
});

// add new card name input
records.on(["selectedCard"], ({value}) => {
    const cardInput = document.getElementById("AddCardDialog-card-input") as HTMLInputElement;
    if (cardInput) {cardInput.remove()}

    if (value === "" || value === "New Card"){
        document.getElementById("AddCardDialog-card-field")!.replaceChildren(
            Object.assign(document.createElement("input"),{
                style: "margin-top:var(--size-sm1)",
                type: "text", 
                placeholder:"Card Name",
                id:"AddCardDialog-card-input",
                name: "new card"  
            })
        )
    }

});

// ok button disabled
records.on(["selectedCard", "cardName"], pl => {
    (document.getElementById("AddCardDialog-ok") as HTMLButtonElement).disabled = (
        (records.get("selectedCard") === "" || 
         records.get("selectedCard") === "New Card" ) &&
         records.get("cardName") === ""
    )
});




// handle form
window.handleCardForm = (form: HTMLFormElement, event: SubmitEvent): boolean => {(async () => {
    
    const action = (event.submitter as HTMLButtonElement)?.value;
    if (action === 'cancel') { return true;}
  
    const data = new FormData(form);
    const selectElement = document.getElementById("AddCardDialog-card-select") as HTMLSelectElement;
    const selectedOptionId = selectElement.options[selectElement.selectedIndex].id;

    const id    = ( data.get("select card") === "New Card") ? `Cards:${nanoid()}` : selectedOptionId;
    const name  = ( data.get("select card") === "New Card") ? data.get("new card") as string : data.get("select card") as string ; 
    const vault = `Vaults:${(data.get("select vault"))}`;

    await dbquery(`
        BEGIN TRANSACTION;

        LET $contentid = $content.id;
        LET $time = {updatedAt : $content.updatedAt};
        
        IF !record::exists($contentid) {
            RELATE $vault -> Contain -> $contentid CONTENT $time;
        };

        UPSERT $content.id CONTENT $content;

        COMMIT TRANSACTION;
    `,{
        
        vault: toRecordId(vault),
        content: {
            id: toRecordId(id),
            status: "available",
            name: name,            
            data: data.getAll('comments') as string[],
            updatedAt: new Date().toISOString(),
        }
    })

    records.updateCardsList()
    })();

    return true;
};


// reset the form on close
dialog.addEventListener('close', () => {
    const cardInput = document.getElementById("AddCardDialog-card-input") as HTMLInputElement;
    if (cardInput) { cardInput.value = "" }
   
    const comments = Array.from(
    document.querySelectorAll<HTMLTextAreaElement>('textarea[name="comments"]')
    );
    if (comments.length === 0) return;

    const [first, ...rest] = comments;
    first.value = '';
    rest.forEach(textarea => textarea.remove());
 });

</script>