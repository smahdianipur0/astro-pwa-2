---
import Dialog from './ui/Dialog.astro';
---

<div 
    class="not-prose"
    id="AddCardDialog-div"
    style="display: flex; 
    flex-direction: 
    row-reverse; 
    align-items: 
    flex-start; 
    height: var(--size-lg1);">

    <button id="AddCardDialog-add" class="tertiary-btn"> 

        <svg width="24" height="24"fill="none" style="pointer-events: none; padding: 1px; width: var(--size-sm3);" viewBox="0 0 24 24">
            <path d="M11.75 3a.75.75 0 0 1 .743.648l.007.102.001 7.25h7.253a.75.75 0 0 1 .102 1.493l-.102.007h-7.253l.002 7.25a.75.75 0 0 1-1.493.101l-.007-.102-.002-7.249H3.752a.75.75 0 0 1-.102-1.493L3.752 11h7.25L11 3.75a.75.75 0 0 1 .75-.75Z"/>
        </svg>

        <p style="padding-right: var(--size-xs3); pointer-events: none;"> Add </p>

    </button>

</div>

<Dialog identifier="AddCardDialog" formHandler="return handleCardForm(this, event);">

    <p>
        <label for="AddCardDialog-vault">Vault:</label>

        <select
          name="select vault"
          class="max-width prose"
          id="AddCardDialog-vault"></select> 
    </p>

    <p id="AddCardDialog-card-field">
        <label for="AddCardDialog-card-select">Card:</label>

        <select
          name="select card"
          class="max-width prose"
          id="AddCardDialog-card-select"></select>
    </p>

    <div id="AddCardDialog-comments">
        <textarea name="comments"></textarea>
    </div>

    <div
        id="AddCardDialog-add-comment-field"
        class="not-prose"
        style="display: flex; 
        flex-direction: row-reverse; 
        align-items: flex-start; 
        height: var(--size-lg1); 
        margin-top: var(--size-xs2);">

        <button
            type="button"
            id="AddCardDialog-add-comment"
            class="tertiary-btn">

        <svg width="24" height="24" fill="none" style="pointer-events: none; padding: 1px; width: var(--size-sm3);" viewBox="0 0 24 24">
            <path d="M11.75 3a.75.75 0 0 1 .743.648l.007.102.001 7.25h7.253a.75.75 0 0 1 .102 1.493l-.102.007h-7.253l.002 7.25a.75.75 0 0 1-1.493.101l-.007-.102-.002-7.249H3.752a.75.75 0 0 1-.102-1.493L3.752 11h7.25L11 3.75a.75.75 0 0 1 .75-.75Z"/>
        </svg>

        <p style="padding-right: var(--size-xs3); pointer-events: none;"> Add</p>

        </button>
    </div>

    <menu 
        class="flex-center-childs"
        style="gap: var(--size-sm0); 
        margin-top: var(--size-sm3);">

    <button
        class="max-width not-prose unstyle-button"
        type="submit"
        value="cancel">
        Cancel</button>

    <button
        class="max-width"
        type="submit"
        value="confirm"
        id="AddCardDialog-ok">
        OK</button>
    </menu>
</Dialog>

<script>

import { el } from "../utils/elementUtils";
import { dbUpserelate, getEntryById } from "../utils/surrealdb-indexed"
import { records } from "../logic/records"       
import { customAlphabet } from 'nanoid'

const nanoid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 20)


// initial handleCardForm
declare global {
    interface Window {
        handleCardForm: (form: HTMLFormElement, event: SubmitEvent) => boolean;
    }
}

const dialog = document.getElementById('AddCardDialog') as HTMLDialogElement;


// bind listeners
document.getElementById("AddCardDialog-div")!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-add")){
        (document.getElementById("AddCardDialog") as HTMLDialogElement).showModal();
    };
});

dialog!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-add-comment")){
        e.preventDefault();
        const fragment = document.createDocumentFragment();
        fragment.append(el.c('textarea', {name:"comments"}) );
        document.getElementById("AddCardDialog-comments")!.append(fragment)
        return false
    };
});

dialog!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-vault")){
        records.setSelectedVault((e!.target as HTMLInputElement).value.toString());
    };
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-card-select")){
        records.setSelectedCard((e!.target as HTMLInputElement).value.toString());
        records.setCardName("")
    };
    if((e!.target as HTMLInputElement).matches("#AddCardDialog-card-input")){
        records.setCardName((e!.target as HTMLInputElement).value.toString())
    };
});

// change the selcted valuts and card creation dialog when valut select elment value changes
records.on(["selectedVault"], ({value}) => { (async () => {
    if(value !== undefined) {
        const selected = await getEntryById("Vaults", value);
            if (selected?.role === "owner") {
              (document.getElementById("AddCardDialog-vault") as HTMLSelectElement).value = selected.name;  
            }
        }
})()});

records.on(["vaultsList"], ({value}) => {
    // append options
    const cardVaultlist = document.getElementById("AddCardDialog-vault") as HTMLSelectElement
    cardVaultlist.textContent = "";

    const fragment = document.createDocumentFragment();

    if (records.get("editableVaultList").length !== 0){
         (records.get("editableVaultList") ?? [])
         .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
         .forEach((entry) => {
            fragment.append( el.c("option", {textContent:entry.name, id:entry.id?.split(":")[1]}));
        });
    }
    cardVaultlist.append(fragment);

    const selectCard = document.getElementById("AddCardDialog-card-select") as HTMLSelectElement;
    if (selectCard){ records.setSelectedCard(selectCard.options[0]?.value)}
});

// update availible cards to select
records.on(["editableVaultList", "cardsList"], pl => {
    (async () => {
        const selectCardList = document.getElementById("AddCardDialog-card-select") as HTMLInputElement;
        if (!selectCardList) return;

        selectCardList.textContent = "";
        records.setSelectedCard("");

        selectCardList.disabled = (records.get("editableVaultList").length === 0);

        if (records.get("editableVaultList").length !== 0) {
            const fragment = document.createDocumentFragment();

            const availableCards = (records.get("cardsList") ?? []).filter(item => item.status === "available");
            if (availableCards.length === 0) {
                fragment.append(el.c("option", { textContent: "New Card" }));
            } else {
                fragment.append(el.c("option", { textContent: "New Card" }));
                availableCards
                    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
                    .forEach((entry) => {
                        fragment.append(
                            el.c("option", { textContent: entry.name, id: entry.id?.split(":")[1] })
                        );
                    });
            }

            selectCardList.append(fragment);
        }
    })();
});

// add new card name input
records.on(["selectedCard"], ({value}) => {
    const cardInput = document.getElementById("AddCardDialog-card-input") as HTMLInputElement;
    if (cardInput) {cardInput.remove()}

    const fragment = document.createDocumentFragment();

    if (value === "" || value === "New Card") {
        fragment.append(el.c("input", {
            style: "margin-top:var(--size-sm1)",
            type: "text", 
            placeholder:"Card Name",
            id:"AddCardDialog-card-input",
            name: "new card"
        }));

        document.getElementById("AddCardDialog-card-field")!.append(fragment)
    } 
});

// ok button disabled
records.on(["selectedCard", "cardName"], pl => {
    (document.getElementById("AddCardDialog-ok") as HTMLButtonElement).disabled = (
        (records.get("selectedCard") === "" || 
         records.get("selectedCard") === "New Card" ) &&
         records.get("cardName") === ""
    )
});


// handle form
window.handleCardForm = (form: HTMLFormElement, event: SubmitEvent): boolean => {
    const action = (event.submitter as HTMLButtonElement)?.value;
  
    if (action === 'cancel') { return true;}
  
    const data = new FormData(form);

    const selectElement = document.getElementById("AddCardDialog-card-select") as HTMLSelectElement;
    const selectedOptionId = selectElement.options[selectElement.selectedIndex].id;

    const id   = ( data.get("select card") === "New Card") ? nanoid() : selectedOptionId;
    const name = ( data.get("select card") === "New Card") ? data.get("new card") as string : data.get("select card") as string ; 

    dbUpserelate("Cards:upserelate", {
        id:id, 
        name:name, 
        status:"available", 
        data: data.getAll('comments') as string[],
        "to:Vaults_has": {
            in: data.get("select vault") as string} 
        });

    records.updateCardsList()
    return true;
};

// reset the form on close
dialog.addEventListener('close', () => {
    const cardInput = document.getElementById("AddCardDialog-card-input") as HTMLInputElement;
    if (cardInput) { cardInput.value = "" }
   
    const textareas = document.querySelectorAll<HTMLTextAreaElement>('textarea[name="comments"]');
    if (textareas.length > 1) {
      const first = textareas[0];


      for (let i = 1; i < textareas.length; i++) {
        const textarea = textareas[i];
        textarea.parentElement?.removeChild(textarea);
      }

      first.value = "";
    } else if (textareas.length === 1) {
      textareas[0].value = "";
    }
 });

// await dbReadRelation("Vaults", "Vaults_has", "Cards", "test3")
  
</script>