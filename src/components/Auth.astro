---

---
<div id="Auth-target"> <div class="skeleton"></div></div>

<div id="Auth-result"></div>

<script>

import { dbCreate, dbReadAll, dbUpdate, } from "../utils/surrealdb-indexed"
import { auth,authQueryChallenge,regQueryChallenge} from "../logic/auth"
import { initialAuthUi } from './Auth'
import { render } from "solid-js/web"
import { SupersededError } from "../utils/error";
import { trpc } from "../utils/trpc";
import queryHelper  from "../utils/query-helper"

// import {syncVaults} from "../utils/syncLayer"
// (async () => { await syncVaults();})();
 

// initiate auth state based on indexed database
const user = await dbReadAll("Users");

if (user && user?.length === 0) {
    dbCreate("Users:create", { registered: false });
    auth.setIndexedUid(false);
}

if (user && user?.length !== 0) {
    const userId = user[0].id;
    if (userId && user[0].registered === true) {
        auth.setIndexedUid(true);
    }
} 


const authResult = document.getElementById("Auth-result") as HTMLElement;
const credentialsDiv = document.getElementById("Auth-target") as HTMLElement;

function updateSucceededAuth() {
    credentialsDiv.replaceChildren(
        Object.assign(document.createElement('small'), {
            style:'margin-top: 0', 
            textContent: "device registered." 
        })
    );

    authResult.textContent = "";
}


// initial ui based on states
(async () => {
    if (auth.get("indexedUid") === false) {
        credentialsDiv.textContent = '';
        render(() => initialAuthUi(), credentialsDiv);

    } else {
        updateSucceededAuth()
    }
})();


// get user name
document.getElementById("Auth-target")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#user_name")){
       const value = (e!.target as HTMLInputElement).value;
       auth.setUserName(value.toString());
       (document.getElementById("registration")! as HTMLInputElement).disabled  = (auth.get("userName") === "");
    }
});


document.getElementById("Auth-target")!.addEventListener("click", (e) => {
    
    if ((e!.target as HTMLInputElement).matches("#registration")) {

        (async () => {
            
            const query = await regQueryChallenge(); 
            if (!query) return;               
            if (!(query.registration)){authResult.textContent = "Connection failed"}
            if ( query.registration){authResult.textContent = "Connectoing to the server"}
            

            const reg = await queryHelper.mutate("reg", async () => {
                return await trpc.registry.mutate({
                    challenge :query.challenge,
                    registry: query.registration,
                });
            });

            // handle Failed regestration 
            if (reg.err && !(reg.value instanceof SupersededError)){authResult.textContent = "Registration Failed"; return}
            const userId = user?.[0]?.id;
            if (!userId) return;


            // handle Succeeded regestration 
            updateSucceededAuth()                    
            dbUpdate("Users:update", { id: userId, registered: true, UID: query.registration.id });
            auth.setIndexedUid(true);  
        })();
    }

    // start authentication
    if ((e!.target as HTMLInputElement).matches("#authentication")) {
        (async () => {
         
            try {
                const query = await authQueryChallenge();
                if (!query) return;
                if (!(query.authentication)) { authResult.textContent = "Failed to start authentication"; return; }
                authResult.textContent = "Connecting to the server...";
                
                // const authData = await validateAuthentication(query.challenge, query.authentication);
                const authData = await queryHelper.mutate("auth", async () => {
                    return await trpc.authenticate.mutate({
                        challenge: query.challenge,
                        authenticationData: query.authentication as any,
                    });
                });
                authData.value

                // handle Faild auth
                if(!(authData.value instanceof SupersededError)){return}
                if (authData.err) {authResult.textContent = "Authentication Failed"; return;}
                if (!authData.value.authenticated || !authData.value.credentialId) {authResult.textContent = "Authentication Failed"; return; }      
                const userId = user?.[0]?.id;
                if (!userId) return;

                // handle Succeeded auth 
                updateSucceededAuth();
                dbUpdate("Users:update", { id: userId, registered: true, UID: authData.value.credentialId });
                auth.setIndexedUid(true);

            } catch (error) {
                authResult.textContent = "Authentication Failed";
            }
        })();
    }
});

</script>
