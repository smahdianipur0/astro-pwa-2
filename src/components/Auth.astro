---

---
<div id="Auth-target"> <div class="skeleton"></div></div>

<div id="Auth-result"></div>

<script>

import { el } from "../utils/elementUtils";
import { dbCreate, dbReadAll, dbUpdate, } from "../utils/surrealdb-indexed"

import{
    userName,   setUserName,
    indexedUid, setIndexedUid,
    authQueryChallenge,     regQueryChallenge,
    validateAuthentication, validateRegistration} 
    from "../logic/auth"

// import {syncVaults} from "../utils/syncLayer"
// (async () => { await syncVaults();})();
 

// initiate auth state based on indexed database
const user = await dbReadAll("Users");

if (user && user?.length === 0) {
    dbCreate("Users:create", { registered: false });
    setIndexedUid(false);
}

if (user && user?.length !== 0) {
    const userId = user[0].id?.id;
    if (userId && user[0].registered === true) {
        setIndexedUid(true);
    }
} 


const authResult = document.getElementById("Auth-result") as HTMLElement;
const credentialsDiv = document.getElementById("Auth-target") as HTMLElement;

function updateSucceededAuth() {
    credentialsDiv.textContent = '';

    const fragment = document.createDocumentFragment();

    fragment.append( el.c('p', {  className: 'hint', style: 'margin-top: 0;',append: [
        el.c('span', { textContent: "device registered." })
    ]}));

    credentialsDiv.append(fragment);
    authResult.textContent = "";
}


// initial ui based on states
(async () => {
    console.log(indexedUid())
    if (indexedUid() === false) {
        credentialsDiv.textContent = '';

        const fragment = document.createDocumentFragment();
        
        fragment.append(
            el.c('div', {className: 'prose',
                style: 'display: flex; gap: var(--size-sm0); justify-content: space-between;',
                append: [
                    el.c('input', {id: 'user_name',
                        type: 'text', placeholder: 'Name',autocomplete: 'off',
                        style: 'margin-bottom: var(--size-sm0); width: 100%;'}),

                    el.c('button', {id: 'registration',
                        style: 'margin-bottom: var(--size-sm0); width: fit-content; white-space: nowrap;',
                        textContent: 'Sign Up',
                        disabled: true})
                ]
            }),

            el.c('p', { className: 'hint', style: 'margin-top: 0;', append: [

                el.c('span', { textContent: 'Allready Signed Up ? ' }),
                el.c('button', {
                    className: 'unstyle-button not-prose',
                    id: 'authentication',
                    style: 'font-weight: 600; text-decoration: underline;',
                    textContent: 'Sign In'})
            ]})
        );
        
        credentialsDiv.append(fragment);
    } else {
        updateSucceededAuth()
    }
})();


// get user name
document.getElementById("credentials")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#user_name")){
       const value = (e!.target as HTMLInputElement).value;
       setUserName(value.toString());
       (document.getElementById("registration")! as HTMLInputElement).disabled  = (userName() === "");
    }
});


document.getElementById("credentials")!.addEventListener("click", (e) => {
    
    if ((e!.target as HTMLInputElement).matches("#registration")) {

        (async () => {
            try {
                const { registration, challenge } = await regQueryChallenge();
                if (!registration){authResult.textContent = "Connection failed"}
                if ( registration){authResult.textContent = "Connectoing to the server"}

                const {registryData,registryError} = await validateRegistration(challenge, registration)

                // handle Succeeded regestration 
                if (registryError){authResult.textContent = "Registration Failed"; return}
                if (!registryData){authResult.textContent = "Registration Failed"; return}
                if (!user) return;
                const userId = user[0]?.id?.id;
                if (!userId) return;

                // handle Failed regestration 
                updateSucceededAuth()                    
                dbUpdate("Users:update", { id: userId, registered: true, UID: registration.id });
                setIndexedUid(true);  

            } catch (error) {
                authResult.textContent = "Registration Failed"
            }

        })();
    }

    // start authentication
    if ((e!.target as HTMLInputElement).matches("#authentication")) {
        (async () => {
         
            try {
                const { authentication, challenge } = await authQueryChallenge();
                if (!authentication) { authResult.textContent = "Failed to start authentication"; return; }
                authResult.textContent = "Connecting to the server...";
                
                const { authData, authError } = await validateAuthentication(challenge, authentication);
              
                // handle Faild auth
                if (authError) {authResult.textContent = "Authentication Failed"; return;}
                if (!authData) {authResult.textContent = "Authentication Failed"; return;}
                if (!authData.authenticated || !authData.credentialId) {authResult.textContent = "Authentication Failed"; return; }      
                if (!user ) { return }
                const userId = user[0]?.id?.id;
                if (!userId) return;

                // handle Succeeded auth 
                updateSucceededAuth();
                dbUpdate("Users:update", { id: userId, registered: true, UID: authData.credentialId });
                setIndexedUid(true);

            } catch (error) {
                authResult.textContent = "Authentication Failed";
            }
        })();
    }
});

</script>
