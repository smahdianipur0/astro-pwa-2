---
import RecentDelPass from "../components/RecentDelPass.astro"
import Drawer from '../components/ui/Drawer.tsx';
---

<div id="TempList" class="blink flex-center-childs">
  
    <Drawer client:load>
        <fragment slot="trigger">
            <svg width="24" height="24" fill="none" viewBox="0 0 24 24" >
                <path d="M11.75 3a.75.75 0 0 1 .743.648l.007.102.001 7.25h7.253a.75.75 0 0 1 .102 1.493l-.102.007h-7.253l.002 7.25a.75.75 0 0 1-1.493.101l-.007-.102-.002-7.249H3.752a.75.75 0 0 1-.102-1.493L3.752 11h7.25L11 3.75a.75.75 0 0 1 .75-.75Z" fill="oklch(var(--gray-95))"/>
            </svg>
        </fragment>

        <fragment slot="title" style="font-weight: 500;">Saved for Later</fragment>

        <fragment data-corvu-no-drag slot="content" class="prose" >
 
                <fieldset class="box-shadow" id="TempList-inputs" >
                    <div 
                        style="display: flex; flex-direction: column;" 
                        class="prose"
                        id="input-group">

                        <input 
                            type="text" 
                            id="TempList-inputs-title" 
                            placeholder="Title" 
                            style="margin-bottom: var(--size-sm2);"/>

                        <div style="display: flex; flex-direction: row;">
                            <input 
                                type="checkbox"
                                id="TempList-inputs-auto-pass" 
                                style="height:var(--size-md4)"> 

                            <label 
                                style=" place-self: center; margin-left: var(--size-sm0);" 
                                for="TempList-inputs-auto-pass">
                                Enter Password Manually</label>
                        </div>

                        <input 
                            type="text" 
                            id="TempList-inputs-password"
                            placeholder="Password" readonly />
                        
                        <button 
                            style="margin-top: var(--size-sm2);"
                            id="TempList-inputs-add">
                            Add</button>
                    </div>
                </fieldset>

                <search id="TempList-search" class="prose">

                    <input type="search" id="TempList-search-input" placeholder="Search">
                    <button type="reset" class="not-prose" id="TempList-search-cancel" >Cancel</button>

                </search>


                <fieldset class="box-shadow" style="padding: 0; color: oklch(var(--gray-95));">
                    <menu id="TempList-list" style="background: transparent;"> 
                        <small  style="padding-block:var(--size-sm3)"> Loading records </small>
                    </menu>
                </fieldset>

              
                <RecentDelPass/>



            <dialog id="TempList-update" class="prose">
                <form method="dialog">
                    
                    <h3 style="margin-top: 0;">Edit Item</h3>

                    <section>

                        <input 
                            type="text" 
                            name="title"  
                            placeholder="Title" 
                            id="TempList-update-title"/>

                        <input 
                            type="text" 
                            name="Password" 
                            placeholder="Password" 
                            id="TempList-update-pass"/>
                            
                    </section>

                    <div class="flex-center-childs" style="gap:var(--size-sm0);margin-top:var(--size-sm3);">           
                      <button class="not-prose max-width" >Cancel</button>
                      <button class="max-width" id="TempList-update-ok">Update</button>  
                    </div>
                </form>
            </dialog>
        </fragment>      
    </Drawer>
</div>

<style is:global>


#RecentDelPass-list > li:last-of-type::after,
#TempList-list > li:last-of-type::after {
  content: 'tap on passwords to copy';
  position: absolute;
  bottom: 0;
  transform: translateY(var(--size-md2));
  font-size: var(--font-sm4);
  color: oklch(var(--gray-50) / 1);
}

#RecentDelPass-list > li:last-of-type,
#TempList-list > li:last-of-type {
  margin-bottom: var(--size-md2);
}

</style>

<script>

import { el } from "../utils/elementUtils";
import { pass } from '../logic/pass';
import { showToast } from "../logic/misc.ts";
import { dbCreate,dbUpdate, getEntryById, toRecordId } from "../utils/surrealdb-indexed";
import { tempList } from "../logic/tempList.ts" 
import { Templist } from './TempList'
import { render } from "solid-js/web"



(async () => {
  document.getElementById("TempList")!.classList.remove('blink');

  const inputGroup     = (await el.wait("#input-group"))      as HTMLElement;
  const entriesList    = (await el.wait("#TempList-list"))     as HTMLElement;
  const passwordInput  = (await el.wait("#TempList-inputs-password"))   as HTMLInputElement;
  const titleInput     = (await el.wait("#TempList-inputs-title"))      as HTMLInputElement;
  const addEntryButton = (await el.wait("#TempList-inputs-add")) as HTMLButtonElement;
  const searchInputEl  = (await el.wait("#TempList-search-input"))     as HTMLInputElement;

  
  document.getElementById("TempList-search")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#TempList-search-input")){
       tempList.setSearchInput((e!.target as HTMLInputElement).value)
    }
  });

  document.getElementById("TempList-search")!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#TempList-search-cancel")){
      searchInputEl.value = '';
      tempList.setSearchInput('');
      tempList.setIsSearching(false)
    }
  });

  searchInputEl.addEventListener("focus", (e) => {tempList.setIsSearching(true);});
  searchInputEl.addEventListener("blur", (e) => {tempList.setIsSearching(tempList.get("searchInput").trim() !== "")});


// render entries
tempList.on(["isSearching", "searchArray"], pl => {

  entriesList.textContent = '';

  if (tempList.get("isSearching") ? tempList.get("searchArray").length === 0 : tempList.get("entries").length === 0) { 
    render(() => Templist(), entriesList);
  } else {

    (tempList.get("isSearching") ? tempList.get("searchArray")  : (tempList.get("entries") ?? [])
    .sort((a, b) => new Date(b.crreatedAt).getTime() - new Date(a.crreatedAt).getTime())).
    forEach((entry) => {
      render(() => Templist(entry), entriesList);
    });
  };  
});


  entriesList.addEventListener("click", (e) => {

  //delelte
  const deleteButton = (e!.target as HTMLInputElement).closest("[data-action='delete']");
  if (deleteButton) {
    const buttonId = toRecordId(deleteButton.id,`PasswordEntry`);
    (async () => { buttonId && tempList.deleteEntries(buttonId) })();
  }

  //update
  const updateButton = (e!.target as HTMLInputElement).closest("[data-action='update']");
  if (updateButton) {
    (async () => {
      (document.getElementById("TempList-update") as HTMLDialogElement).showModal();

        const buttonId = toRecordId((updateButton.id),`PasswordEntry`);
        if (!buttonId){return};

        const entry =await getEntryById(buttonId) ;
        if (!entry){return};

        (document.getElementById("TempList-update-title") as HTMLInputElement).value = entry.title;
        (document.getElementById("TempList-update-pass") as HTMLInputElement).value = entry.password;
        (document.getElementById("TempList-update") as HTMLDialogElement).setAttribute("data-_", updateButton.id);
        
    })();
  };

  // update dialog confirm
  document.getElementById("TempList-update")!.addEventListener("click", (e) => {
    if((e!.target as HTMLInputElement).matches("#TempList-update-ok")) {
      (async () => {
        const itemId = toRecordId((document.getElementById("TempList-update") as HTMLDialogElement).dataset._?? "");
         
        itemId && dbUpdate("PasswordEntry:update", {
          id: itemId, 
          title:(document.getElementById("TempList-update-title") as HTMLInputElement).value, 
          password:(document.getElementById("TempList-update-pass") as HTMLInputElement).value});
        tempList.updateEntries();
      })();
    }
  });

  // copy password
  const copyButton = (e!.target as HTMLInputElement).closest("[data-action='copy']");
  if (copyButton) {
    (async () => {
      navigator.clipboard.writeText(copyButton.id);  
       showToast();
    })();
  }
  });

  // add entry
    inputGroup.addEventListener("click", (e) => {
    if ((e!.target as HTMLInputElement).matches("#TempList-inputs-add")) {
      (async () => {
        await dbCreate("PasswordEntry:create", {
          title:tempList.get("title"),
          password: tempList.get("password"),
          crreatedAt: new Date().toISOString()
        });
        tempList.setTitle("")
        if ((document.getElementById("TempList-inputs-auto-pass") as HTMLInputElement).checked){
          tempList.setPassword("");
        }
        tempList.updateEntries();

        addEntryButton.style.setProperty("--primary", "65% 0.12 174"); 
        addEntryButton.textContent= "Added";
        setTimeout(() => {
          addEntryButton.style.removeProperty("--primary");
          addEntryButton.textContent= "Add";
        }, 1000);

      })();
    }

    // auto-pass entry
    if ((e!.target as HTMLInputElement).matches("#TempList-inputs-auto-pass")) {
      if ((e.target as HTMLInputElement).checked) {
    passwordInput.readOnly = false;
    tempList.setPassword("")
      } else {
        passwordInput.readOnly = true;
        tempList.setPassword(pass.get("Password"))
      }
   }
  });

  // bind input values to state
  inputGroup.addEventListener("input", (e) => {
    if ((e!.target as HTMLInputElement).matches("#TempList-inputs-title")) {
      tempList.setTitle((e!.target as HTMLInputElement).value);
    }
    if ((e!.target as HTMLInputElement).matches("#TempList-inputs-password")) {
      tempList.setPassword((e!.target as HTMLInputElement).value);
    }
  });

  // bind states to input values
  tempList.on(["title"], ({value}) => { titleInput.value = value})

  tempList.on(["password"], ({value}) => { 
    passwordInput.value = value;
    addEntryButton.disabled = (!value)
  });

  // initilize 
  tempList.updateEntries();
  tempList.setPassword(pass.get("Password"));
  pass.on(["Password"], ({value}) => { tempList.setPassword(value)});

})();

</script>