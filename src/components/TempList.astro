---
import Card from "../components/ui/Card.astro";
import Dialog from "../components/ui/Dialog.astro"
import RecentDelPass from "../components/RecentDelPass.astro"
---

<div data-corvu-no-drag style="
position:absolute;
inset:0;
top:var(--gap-x05);
height: calc(var(--drawer-heigt) - var(--gap-x05));
display: flex; 
flex-direction: column; 
align-items: center; 
gap: var(--gap-x04); 
overflow-y: scroll;
padding-top: var(--gap-x02);
padding-inline: var(--gap-x02);
max-width: 100%;
overflow-x: hidden;">

  <Card iden="entries-list-card" >
    <div style="display: flex; flex-direction: column;" class="prose" id="input-group">
      <input type="text" id="title-input" placeholder="Title" style="margin-bottom: var(--gap-x03);"/>
      <div style="display: flex; flex-direction: row;">
        <input id="auto-pass-entry" type="checkbox" style="height:var(--gap-x07)"> 
        <label style="
        place-self: center; 
        margin-left: var(--gap);" for="auto-pass-entry">Enter Password Manually</label>
      </div>
      <input type="text" id="password-input" placeholder="Password" readonly />
      
      <button style="margin-top: var(--gap-x03);"id="add-entry-button">Add</button>
    </div>
  </Card>
    <div id="search-box" class="prose max-width" style="display: flex; 
    flex-direction: row;
    position:relative;">
      <input type="text" id="search-input" style=" position: relative;
      background: oklch(var(--gray-15) / 1);
      border: none ;
      padding-left: var(--gap-x07);
      height: var(--gap-x65);
      box-shadow: none;"  placeholder="Search">
      <svg style="position: absolute;
      margin: var(--default-padding);
      margin-inline: var(--gap);
      height: var(--gap-x04);
      padding-top: 2px;
      opacity:0.5;" width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M10 2.5a7.5 7.5 0 0 1 5.964 12.048l4.743 4.745a1 1 0 0 1-1.32 1.497l-.094-.083-4.745-4.743A7.5 7.5 0 1 1 10 2.5Zm0 2a5.5 5.5 0 1 0 0 11 5.5 5.5 0 0 0 0-11Z" /></svg>
      <button class="not-prose" id="cancel-search" >Cancel</button>
    </div>

    <div class="card-border">
      <div class="card glass box-shadow max-width">
        <div class="entries-list not-prose" id="entries-list"> 
          <p class="hint" style="padding-top:var(--gap-x04)"> Loading records </p>
        </div>
      </div>
    </div>

    
<RecentDelPass/>

</div>

<Dialog identifier="edit-temp-list-dialog">
  <h3 style="margin-top: 0;">Edit Item</h3>
  <input type="text" name="title"  class="input-group-top" placeholder="Title" id="updating-temp-title-input"/>
  <input type="text" name="Password" class="input-group-bottom" placeholder="Password" id="updating-temp-pass-input"/>
  <div class="flex-center-childs" style="gap:var(--gap);margin-top:var(--gap-x04);">
    
    <button class="unstyle-button not-prose max-width" >Cancel</button>
    <button class="max-width" id="update-temp-list-entry">Update</button>
    
  </div>
</Dialog>


<style is:global>


#cancel-search {
  color: oklch(var(--primary));
  width: var(--gap-x08);
  opacity: 0; 
  position: absolute; 
  top: 0;
  right: 0;
  margin: var(--default-padding);
  margin-inline: 0;
  line-height: var(--gap-x04);
  transition: opacity 0.1s
}


:root:has(#search-input:focus-within) #cancel-search,
:root:has(#search-input:not(:placeholder-shown)) #cancel-search {
  opacity: 1; 
  transition: opacity 0.2s;
}

#search-input {
  width: 100%;
  transition: width 0.1s;
}

:root:has(#search-input:focus-within) #search-input,
:root:has(#search-input:not(:placeholder-shown)) #search-input {
  width: calc(100% - var(--gap-x09));
  transition: width 0.1s;
}

svg{
  fill: oklch(var(--gray-95))
}


#recent-del-list > .entry-item:last-of-type::after,
#entries-list > .entry-item:last-of-type::after {
  content: 'tap on passwords to copy';
  position: absolute;
  bottom: 0;
  transform: translateY(var(--gap-x06));
  font-size: var(--font-sm1);
  color: oklch(var(--gray-50) / 1);
}


summary.right-to-left::before { 
  content: "";
  background-color: oklch(var(--gray-95) / 1);
  -webkit-mask-image:url('data:image/svg+xml,<svg width="var(--gap-x04)" height="var(--gap-x04)" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 1.75a3.25 3.25 0 0 1 3.245 3.066L15.25 5h5.25a.75.75 0 0 1 .102 1.493L20.5 6.5h-.796l-1.28 13.02a2.75 2.75 0 0 1-2.561 2.474l-.176.006H8.313a2.75 2.75 0 0 1-2.714-2.307l-.023-.174L4.295 6.5H3.5a.75.75 0 0 1-.743-.648L2.75 5.75a.75.75 0 0 1 .648-.743L3.5 5h5.25A3.25 3.25 0 0 1 12 1.75Zm6.197 4.75H5.802l1.267 12.872a1.25 1.25 0 0 0 1.117 1.122l.127.006h7.374c.6 0 1.109-.425 1.225-1.002l.02-.126L18.196 6.5ZM13.75 9.25a.75.75 0 0 1 .743.648L14.5 10v7a.75.75 0 0 1-1.493.102L13 17v-7a.75.75 0 0 1 .75-.75Zm-3.5 0a.75.75 0 0 1 .743.648L11 10v7a.75.75 0 0 1-1.493.102L9.5 17v-7a.75.75 0 0 1 .75-.75Zm1.75-6a1.75 1.75 0 0 0-1.744 1.606L10.25 5h3.5A1.75 1.75 0 0 0 12 3.25Z" fill="%23fff"/></svg>');
  mask-image: url('data:image/svg+xml,<svg width="var(--gap-x04)" height="var(--gap-x04)" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 1.75a3.25 3.25 0 0 1 3.245 3.066L15.25 5h5.25a.75.75 0 0 1 .102 1.493L20.5 6.5h-.796l-1.28 13.02a2.75 2.75 0 0 1-2.561 2.474l-.176.006H8.313a2.75 2.75 0 0 1-2.714-2.307l-.023-.174L4.295 6.5H3.5a.75.75 0 0 1-.743-.648L2.75 5.75a.75.75 0 0 1 .648-.743L3.5 5h5.25A3.25 3.25 0 0 1 12 1.75Zm6.197 4.75H5.802l1.267 12.872a1.25 1.25 0 0 0 1.117 1.122l.127.006h7.374c.6 0 1.109-.425 1.225-1.002l.02-.126L18.196 6.5ZM13.75 9.25a.75.75 0 0 1 .743.648L14.5 10v7a.75.75 0 0 1-1.493.102L13 17v-7a.75.75 0 0 1 .75-.75Zm-3.5 0a.75.75 0 0 1 .743.648L11 10v7a.75.75 0 0 1-1.493.102L9.5 17v-7a.75.75 0 0 1 .75-.75Zm1.75-6a1.75 1.75 0 0 0-1.744 1.606L10.25 5h3.5A1.75 1.75 0 0 0 12 3.25Z" fill="%23fff"/></svg>');
  width: var(--gap-x04);
  height: var(--gap-x04);
} 

details.right-to-left[open] > summary::before {
  content: 'Cancel';
  color: oklch(var(--gray-95) / 1);
  font-size: var(--font-sm1);
  background-color: unset;
  -webkit-mask-image:none;
  mask-image: none;
  width: auto;
  height: auto;
} 

</style>

<script>
import {
  dbCreate,
  dbUpdate,
  dbDelete,
  dbReadAll,
  getEntryById,
  type ReadAllResultTypes } from "../utils/surrealdb-indexed";
import { element } from "../utils/elementUtils";
import { password, showToast } from "../components/homeLogic.ts";
import { createEffect } from "solid-js";
import Fuse from 'fuse.js'
import {listTitle,              setListTitle,
        listPassword,           setListPassword,
        listEntries,            setListEntries,
        updtingEntry,           setUpdtingEntry,
        updatingListEntryTitle, setUpdatingListEntryTitle,
        updatingListEntryPass,  setUpdatingListEntryPass,
        searchInput,            setSearchInput,
        isSearching,            setIsSearching,
        searchArray,            setSearchArray,
        listRecentDel,          setListRecentDel,} from '../logic/tempList.ts'


// initialize entries
(async () => {setListEntries(await dbReadAll("PasswordEntry")  ?? []);})();
(async () => {setListRecentDel(await dbReadAll("RecentDelPass") ?? []);})();

createEffect(() => { setListPassword(password()) });



(async () => {
  document.getElementById("add-drawer-trigger")!.classList.remove('blink');

  const inputGroup     = (await element.wait("#input-group"))      as HTMLElement;
  const entriesList    = (await element.wait("#entries-list"))     as HTMLElement;
  const passwordInput  = (await element.wait("#password-input"))   as HTMLInputElement;
  const titleInput     = (await element.wait("#title-input"))      as HTMLInputElement;
  const addEntryButton = (await element.wait("#add-entry-button")) as HTMLButtonElement;
  const searchInputEl  = (await element.wait("#search-input"))     as HTMLInputElement;

  
  document.getElementById("search-box")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#search-input")){
       setSearchInput((e!.target as HTMLInputElement).value);
    }
  });

  document.getElementById("search-box")!.addEventListener("click",(e)=>{
    if((e!.target as HTMLInputElement).matches("#cancel-search")){
      searchInputEl.value = ''
        setSearchInput('');
      setIsSearching(false)
    }
  });

  searchInputEl.addEventListener("focus", (e) => {setIsSearching(true);});
  searchInputEl.addEventListener("blur", (e) => {setIsSearching(searchInput().trim() !== "")});


  createEffect(() => {
    const fuse = new Fuse(listEntries(), { keys: ['title'] });
    const searched = fuse.search(searchInput()).map(entry => entry.item);
    setSearchArray(searched);
  });


// render entries based on signal
createEffect(() => {
  entriesList.textContent = '';
  const fragment = document.createDocumentFragment();

  if (
    isSearching() ? searchArray().length === 0 : listEntries().length === 0) { 
    fragment.append(element.configure("p", {textContent: "No records found", 
      className:"hint", 
      style:"padding-block :var(--gap-x04)" }));

  } else {
    (isSearching() ? searchArray() as ReadAllResultTypes["PasswordEntry"]  : (listEntries() as ReadAllResultTypes["PasswordEntry"] ?? [])
    .sort((a, b) => new Date(b.crreatedAt).getTime() - new Date(a.crreatedAt).getTime())).
    forEach((entry) => {

      fragment.append(
        element.configure('div', { className: 'entry-item', append: [
          element.configure('div', {append: [

            element.configure('p', { className: 'hint ellipsis', 
              style: "width: 20ch",
              textContent: entry.title || 'untitled'}),

            element.configure('button', {dataset: {action: 'copy'}, 
              className: 'ellipsis',
              style:"text-align: start; width: 19ch;",
              id: entry.password ?? '',
              textContent: entry.password ?? ''})
          ]}),

          element.configure('div', {className: 's-container',append: [

            element.configure('details', { 
              name: 'delete-item', 
              className: 'right-to-left',
              append: [
                element.configure('summary',{ className: 'right-to-left' }), 
                element.configure('button', { dataset: {action: 'delete'},
                  id: entry.id?.id ?? '',
                  textContent: ' Delete'}),
              ]
            }),

            element.configure('button', { dataset: {action: 'update'},id: entry.id?.id ?? '', append: [
              element.draw("svg", { style: "width: var(--gap-x04); height: var(--gap-x04);",viewBox: "0 0 24 24", fill: "none",append: 
                element.draw("path", {d: "M21.03 2.97a3.578 3.578 0 0 1 0 5.06L9.062 20a2.25 2.25 0 0 1-.999.58l-5.116 1.395a.75.75 0 0 1-.92-.921l1.395-5.116a2.25 2.25 0 0 1 .58-.999L15.97 2.97a3.578 3.578 0 0 1 5.06 0ZM15 6.06 5.062 16a.75.75 0 0 0-.193.333l-1.05 3.85 3.85-1.05A.75.75 0 0 0 8 18.938L17.94 9 15 6.06Zm2.03-2.03-.97.97L19 7.94l.97-.97a2.079 2.079 0 0 0-2.94-2.94Z"})
              })
            ]}),
          ]})
        ]})
      );
    });
  };
  
  entriesList.append(fragment);
  });

  // delete entry
  entriesList.addEventListener("click", (e) => {
    const deleteButton = (e!.target as HTMLInputElement).closest("[data-action='delete']");
    if (deleteButton) {
      (async () => {
        const entry = await getEntryById("PasswordEntry", deleteButton.id);
        if (entry) {
          const { title, password,crreatedAt  } = entry;
          await dbCreate("RecentDelPass:create", {title: title, password: password, crreatedAt: crreatedAt });
          setListRecentDel(await dbReadAll("RecentDelPass") ?? []);
        }
        await dbDelete("PasswordEntry:delete", deleteButton.id)
        setListEntries((await dbReadAll("PasswordEntry")) ?? []);
      })();
    }

  //update
  const updateButton = (e!.target as HTMLInputElement).closest("[data-action='update']");
  if (updateButton) {
    (async () => {
      (document.getElementById("edit-temp-list-dialog") as HTMLDialogElement).showModal();
        setUpdtingEntry(updateButton.id);
        const entry = await getEntryById("PasswordEntry", updateButton.id);
        if (entry) {
          const { title, password } = entry;
          console.log(title, password);
          setUpdatingListEntryTitle(title);
          (document.getElementById("updating-temp-title-input") as HTMLInputElement).value = title;

          setUpdatingListEntryPass(password);
          (document.getElementById("updating-temp-pass-input") as HTMLInputElement).value = password;
        }
    })();
  }

  // copy password
  const copyButton = (e!.target as HTMLInputElement).closest("[data-action='copy']");
  if (copyButton) {
    (async () => {
      navigator.clipboard.writeText(copyButton.id);  
       showToast();
    })();
  }
  });

  // add entry
    inputGroup.addEventListener("click", (e) => {
    if ((e!.target as HTMLInputElement).matches("#add-entry-button")) {
      (async () => {
        await dbCreate("PasswordEntry:create", {
          title:listTitle(),
          password: listPassword(),
          crreatedAt: new Date().toISOString()
        });
        setListTitle("");
        if ((document.getElementById("auto-pass-entry") as HTMLInputElement).checked){
          setListPassword("");
        }
        setListEntries((await dbReadAll("PasswordEntry")) ?? []);
        addEntryButton.style.setProperty("--primary", "65% 0.12 174"); 
        addEntryButton.textContent= "Added";
        setTimeout(() => {
          addEntryButton.style.removeProperty("--primary");
          addEntryButton.textContent= "Add";
        }, 1000);

      })();
    }

    // auto-pass entry
    if ((e!.target as HTMLInputElement).matches("#auto-pass-entry")) {
      if ((e.target as HTMLInputElement).checked) {
    passwordInput.readOnly = false;
         setListPassword('');
      } else {
        passwordInput.readOnly = true;
        createEffect(() => {
          setListPassword(password());
        });
      }
   }
  });

  // bind input values to signals
  inputGroup.addEventListener("input", (e) => {
    if ((e!.target as HTMLInputElement).matches("#title-input")) {
      setListTitle((e!.target as HTMLInputElement).value);
    }
    if ((e!.target as HTMLInputElement).matches("#password-input")) {
      setListPassword((e!.target as HTMLInputElement).value);
    }
  });


  // update dialog inputs
  document.getElementById("edit-temp-list-dialog")!.addEventListener("input", (e) => {
      if ((e!.target as HTMLInputElement).matches("#updating-temp-title-input")) {
      setUpdatingListEntryTitle((e!.target as HTMLInputElement).value);
    }
    if ((e!.target as HTMLInputElement).matches("#updating-temp-pass-input")) {
      setUpdatingListEntryPass((e!.target as HTMLInputElement).value);
    }
  });

  // update dialog confirm
  document.getElementById("edit-temp-list-dialog")!.addEventListener("click", (e) => {
    if((e!.target as HTMLInputElement).matches("#update-temp-list-entry")) {
      (async () => {
      dbUpdate("PasswordEntry:update", {
        id: updtingEntry(), 
        title:updatingListEntryTitle(), 
        password:updatingListEntryPass()});
      setListEntries((await dbReadAll("PasswordEntry")) ?? []);
      })();
    }
  });


  // bind signals to input values
  createEffect(() => { titleInput.value = listTitle();});

  createEffect(() => { passwordInput.value = listPassword();});

  // update add entry button state
  createEffect(() => { addEntryButton.disabled = (!listPassword());});
})();

</script>
