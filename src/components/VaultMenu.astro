---
import Menu from './ui/Menu.tsx';
---

<div style="display: flex; align-items: center; padding-inline-start: var(--size-sm2);">


        <Menu client:load>
            <fragment slot="trigger">

                <div class='text-as-button' style={"margin-right: calc(var(--size-sm0)* -1);"} >
                    <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M8 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM18 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" fill="oklch(var(--gray-95))"/></svg>
                </div>

            </fragment>

            <fragment slot="content">
                <menu class='glass' id="VaultMenu" style= "width: var(--size-xl3); border-radius: var(--radius-b); box-shadow: 0px 0px 80px 20px oklch(var(--gray-10) / 40%);">
                    
                    <li>
                        <button id="VaultMenu-create" class="not-prose max-width flex-with-gap no-select" >
                            <svg style='width: var(--size-sm3); pointer-events: none;'  fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2Zm0 1.5a8.5 8.5 0 1 0 0 17 8.5 8.5 0 0 0 0-17ZM12 7a.75.75 0 0 1 .75.75v3.5h3.5a.75.75 0 0 1 0 1.5h-3.5v3.5a.75.75 0 0 1-1.5 0v-3.5h-3.5a.75.75 0 0 1 0-1.5h3.5v-3.5A.75.75 0 0 1 12 7Z" fill="oklch (var(--gray-95))"/>
                            </svg>
                            <div style="pointer-events: none;" > Creat vault </div> 
                        </button>
                    </li>
                  
                    <li >
                        <button class="not-prose max-width flex-with-gap no-select" >                        
                            <svg style='width: var(--size-sm3);pointer-events: none;' fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M6.087 7.75a5.752 5.752 0 0 1 11.326 0h.087a4 4 0 0 1 3.962 4.552 6.534 6.534 0 0 0-1.597-1.364A2.501 2.501 0 0 0 17.5 9.25h-.756a.75.75 0 0 1-.75-.713 4.25 4.25 0 0 0-8.489 0 .75.75 0 0 1-.749.713H6a2.5 2.5 0 0 0 0 5h4.4a6.458 6.458 0 0 0-.357 1.5H6a4 4 0 0 1 0-8h.087ZM22 16.5a5.5 5.5 0 1 0-11 0 5.5 5.5 0 0 0 11 0Zm-6-3a.5.5 0 0 1 1 0v4.793l1.646-1.647a.5.5 0 0 1 .708.708l-2.5 2.5a.5.5 0 0 1-.708 0l-2.5-2.5a.5.5 0 0 1 .708-.708L16 18.293V13.5Z" fill="oklch (var(--gray-95))"/>
                            </svg>
                            <div style="pointer-events: none;" > Import existing Vault </div> 
                        </button>
                    </li>

                    <li>
                        <button id="VaultMenu-delete" class="not-prose max-width flex-with-gap no-select">       
                            <svg style='width: var(--size-sm3);pointer-events: none; fill: oklch(var(--danger))' fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 1.75a3.25 3.25 0 0 1 3.245 3.066L15.25 5h5.25a.75.75 0 0 1 .102 1.493L20.5 6.5h-.796l-1.28 13.02a2.75 2.75 0 0 1-2.561 2.474l-.176.006H8.313a2.75 2.75 0 0 1-2.714-2.307l-.023-.174L4.295 6.5H3.5a.75.75 0 0 1-.743-.648L2.75 5.75a.75.75 0 0 1 .648-.743L3.5 5h5.25A3.25 3.25 0 0 1 12 1.75Zm6.197 4.75H5.802l1.267 12.872a1.25 1.25 0 0 0 1.117 1.122l.127.006h7.374c.6 0 1.109-.425 1.225-1.002l.02-.126L18.196 6.5ZM13.75 9.25a.75.75 0 0 1 .743.648L14.5 10v7a.75.75 0 0 1-1.493.102L13 17v-7a.75.75 0 0 1 .75-.75Zm-3.5 0a.75.75 0 0 1 .743.648L11 10v7a.75.75 0 0 1-1.493.102L9.5 17v-7a.75.75 0 0 1 .75-.75Zm1.75-6a1.75 1.75 0 0 0-1.744 1.606L10.25 5h3.5A1.75 1.75 0 0 0 12 3.25Z" fill="oklch (var(--gray-95))"/>
                            </svg>
                            <div style="pointer-events: none; color: oklch(var(--danger));" > Delete vault </div> 
                        </button>
                    </li>
                  
                </menu>
            </fragment>
        </Menu>
    </div>
</div>


<dialog id="VaultMenu-create-dialog" class="prose">
    <form method="dialog">

        <h3 style="margin-top: 0;">Create vault</h3>

        <input type="text" name="vault-name" id="VaultMenu-create-dialog-input">

        <div class="flex-center-childs" style="gap:var(--size-sm0);margin-top:var(--size-sm3);">
            <button class="not-prose max-width" >Cancel</button>
            <button class="max-width" id="VaultMenu-create-dialog-ok" disabled>Create</button>
        </div>
    </form>
</dialog>


<dialog id="VaultMenu-delete-dialog" class="prose">
    <form method="dialog">

        <h3 style="margin-top: 0;">Delete vault</h3>

        <select name="delete vaults" class="max-width prose" id="VaultMenu-delete-dialog-list" > </select>

        <div class="flex-center-childs" style="gap:var(--size-sm0);margin-top:var(--size-sm3);"> 
            <button class="not-prose max-width" >Cancel</button>
            <button class="max-width" id="VaultMenu-delete-dialog-ok" style="--primary:62.31% 0.246 27" disabled>Delete</button>
        </div>

    </form>
</dialog>


<script>

import { el } from "../utils/elementUtils";
import { dbCreate, dbUpdate} from "../utils/surrealdb-indexed"
import { records } from "../logic/records"

//menu
(async () => {

    const vaultMenu = (await el.wait("#VaultMenu")) as HTMLElement;

    vaultMenu.addEventListener("click",(e)=>{
        if((e!.target as HTMLInputElement).matches("#VaultMenu-create")){
            (document.getElementById("VaultMenu-create-dialog") as HTMLDialogElement).showModal();
        };
        if((e!.target as HTMLInputElement).matches("#VaultMenu-delete")){
            (document.getElementById("VaultMenu-delete-dialog") as HTMLDialogElement).showModal();
        };
    });
})();

//dialog
(async () => {

    const createVaultButton  = (await el.wait("#VaultMenu-create-dialog-ok")) as HTMLButtonElement
    const deleteVaultButton  = (await el.wait("#VaultMenu-delete-dialog-ok")) as HTMLButtonElement
    const selectDeleteVaults = (await el.wait("#VaultMenu-delete-dialog-list"))   as HTMLSelectElement;

    document.getElementById("VaultMenu-create-dialog")!.addEventListener("input",(e)=>{
        if((e!.target as HTMLInputElement).matches("#VaultMenu-create-dialog-input")){
             records.setVaultName((e!.target as HTMLInputElement).value)
        };
    });

    document.getElementById("VaultMenu-create-dialog")!.addEventListener("click",(e)=>{
        if((e!.target as HTMLInputElement).matches("#VaultMenu-create-dialog-ok")){

            (async () => {
                await dbCreate("Vaults:create", {
                    id:records.get("vaultName"),
                    name:records.get("vaultName"), 
                    updatedAt: new Date().toISOString(),
                    status: "available",
                    role: "owner" 
                });
                records.updateVaultsList();
            })();
        };
    });

    document.getElementById("VaultMenu-delete-dialog")!.addEventListener("click",(e)=>{
        if((e!.target as HTMLInputElement).matches("#VaultMenu-delete-dialog-ok")){
            const id = selectDeleteVaults.options[selectDeleteVaults.selectedIndex]?.id;
            console.log(id);
            const value = selectDeleteVaults.options[selectDeleteVaults.selectedIndex]?.value;
            (async () => {
                await dbUpdate("Vaults:update", {
                    id:id, 
                    name: value,
                    updatedAt: new Date().toISOString(),
                    status:"deleted",
                    role: "owner"
                });

                records.updateVaultsList();
            })();
        };
    });

    records.on (["vaultName"], ({value}) => {createVaultButton.disabled = (value === "")});
    records.on (["editableVaultList"], ({value}) => {deleteVaultButton.disabled = (value.length === 0)});

})();


records.on(["vaultsList"], ({value}) => {

    //delete vaults list
    const deleteVaultlist = document.getElementById("VaultMenu-delete-dialog-list") as HTMLSelectElement
    deleteVaultlist.textContent = "";

    const fragment = document.createDocumentFragment();

    if (records.get("editableVaultList").length !== 0){
         (records.get("editableVaultList") ?? [])
         .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
         .forEach((entry) => {
            fragment.append( el.c("option", {textContent:entry.name, id:entry.id}));
        });
    }

    deleteVaultlist.append(fragment);

});

</script>