---
import Tabs from '../components/ui/Tabs.astro';
import CharactersCount from '../components/CharactersCount.astro';
import CharactersPattern from '../components/CharactersPattern.astro'; 
import TempList from '../components/TempList.astro';
---

<fieldset class="box-shadow" style="color: oklch(var(--gray-95));" id="GeneratePass">
    <legend>Generate Password</legend>
    <Tabs name="pass" tab1Label="Random" tab2Label="Manual" >

        <fragment slot="tab1">

            <div class="flex-spread-childs not-prose " style=" position: relative;">

                <div class="text-as-button" style=" margin-top: var(--size-md1);" >
                    <button 
                        id="GeneratePass-r-password" 
                        name="copy password" 
                        class="shiny-text" 
                        style="font-size: var(--font-lg1); font-weight: 300; line-height: var(--size-sm3);">
                        Loading...

                        <!-- <div class="skeleton" style="width:var(--size-xl1)"> </div> -->
                    </button>
                </div>

                <div class="flex-center-childs", style="margin-right: calc(var(--size-sm0) * -1); gap:calc(var(--size-md1) / 2 ); font-size: var(--font-lg1); margin-top: var(--size-md1);">
        
                    <button 
                        id="GeneratePass-redo" 
                        name="regenerate password" 
                        class=" flex-center-childs text-as-button blink" 
                        style="width: var(--size-md1);
                        border-radius: 100px;" >â†»</button>
                        

                    <TempList />

                </div>
            </div>

            <small 
                id="GeneratePass-copy-hint" 
                style="margin-top: calc(var(--size-sm0) * -1);
                margin-bottom: var(--size-md4);"
                > tap to copy </small>  

            <CharactersCount />
            <div style="border-bottom: 1px solid oklch(var(--gray-25) / 1);" ></div>
            <CharactersPattern />

        </fragment>

        <fragment slot="tab2">
            <div 
                class=" prose" 
                style="display: flex;
                gap: var(--size-sm0);
                justify-content: space-between;
                margin: var(--size-md4) 0 0">

                <input 
                    autocomplete="off" 
                    id="GeneratePass-m-input" 
                    type="text" 
                    style="margin-bottom: var(--size-sm0);" 
                    placeholder="Password">

                <button 
                id="GeneratePass-m-copy" 
                style="margin-bottom:var(--size-sm0);" disabled> 
                Copy </button>

            </div>
        </fragment>
    </Tabs>

    <div style=" margin-top:var(--size-sm3); margin-bottom: var(--size-sm0); overflow: hidden">

        <div id="GeneratePass-guessable" class="skeleton-parrent">
          <div style="width:var(--size-xl1);" class="skeleton"> </div>
        </div>

        <div style="position:relative; height:var(--size-sm0); place-content:center">
            <div style="position: absolute; top: var(--size-xs3);" id="box-place-holder"></div>
            <div style="position: absolute; top: var(--size-xs3);" id="box"></div> 
        </div>

        <div id="GeneratePass-strength1" class="skeleton-parrent">
            <div style="width:80% ;" class="skeleton"> </div>
        </div>
    
        <div id="GeneratePass-strength2" class="skeleton-parrent">
            <div style="width:65% ;" class="skeleton"> </div>
        </div>

    </div>

    <details name="encrypted password" class="prose" >

        <summary>Encrypted Password</summary>

        <button 
            id="GeneratePass-encrypted-pass" 
            class="skeleton-parrent not-prose text-as-button ellipsis max-width" 
            style="text-align: start;"
            disabled>

            <div style="width:var(--size-xl1);" class="skeleton"> </div>
        </button>

        <small 
            id="GeneratePass-encrypted-pass-copy" 
            class="not-prose" 
            style="display: block;"></small>

    </details>
</fieldset>

<script>
  
import { pass } from '../logic/pass';
import { showToast } from '../logic/misc'

document.getElementById("GeneratePass")!.addEventListener("change",(e)=>{
  if ((e!.target as HTMLInputElement).matches("#first-tab-id-pass")) {
    if ((e.target as HTMLInputElement).checked) {
      pass.setPassword(pass.get("rPassword"))
    }
  }
  if ((e!.target as HTMLInputElement).matches("#second-tab-id-pass")) {
    if ((e.target as HTMLInputElement).checked) {
      pass.setPassword(pass.get("mPassword"))
    }
  }
});

document.getElementById("GeneratePass-r-password")!.classList.remove('shiny-text');

pass.on(["rPassword"], pl => {
  document.getElementById("GeneratePass-r-password")!.textContent = pl.value;
});

document.getElementById("GeneratePass-redo")!.classList.remove('blink');

document.getElementById("GeneratePass")!.addEventListener("click",(e)=>{
   if((e!.target as HTMLInputElement).matches("#GeneratePass-r-password ,#GeneratePass-copy-hint")){
      navigator.clipboard.writeText(pass.get("rPassword"));  
      showToast(); 
   }

  if((e!.target as HTMLInputElement).matches("#GeneratePass-m-copy")){
      if(pass.get("rPassword") !== "") {
         navigator.clipboard.writeText(pass.get("mPassword"));  
         showToast(); 
      }
  }

  if((e!.target as HTMLInputElement).matches("#GeneratePass-redo")){
    pass.updateRPassword();
  }
});

// manual password input
document.getElementById("GeneratePass")!.addEventListener("input",(e)=>{

    if((e!.target as HTMLInputElement).matches("#GeneratePass-m-input")){
      const value = (e!.target as HTMLInputElement).value;
      pass.setMPassword(value);

      (document.getElementById("GeneratePass-m-copy")! as HTMLInputElement).disabled = (pass.get("mPassword") === "")
    }
});

pass.on(['guessable'], pl => {document.getElementById("GeneratePass-guessable")!.textContent = pl.value})

pass.on(['strength1'], pl => {document.getElementById("GeneratePass-strength1")!.textContent = pl.value })

pass.on(['strength2'], pl => {
  if( pl.value !== "Zxcvbn cannot evaluate a blank password") {
    document.getElementById("GeneratePass-strength2")!.textContent = pl.value
   } else {
      document.getElementById("GeneratePass-strength2")!.textContent = ""  
   }
})

pass.on(['guessable'], pl =>{
  const gu = pl.value;
  
  document.getElementById("box")!.style.setProperty("--box-w", 
    gu === "Enter password"     ? "0%"  :
    gu === "Too Guessable"      ? "36%" :
    gu === "Very Guessable"     ? "52%" :
    gu === "Somewhat Guessable" ? "68%" :
    gu === "Safely Unguessable" ? "84%" :
    gu === "Very Unguessable"   ? "100%": "0%"
 );
  document.getElementById("box")!.style.setProperty("--box-p", 
    gu === "Enter password"     ? "0%"  :
    gu === "Too Guessable"      ? "0%"  :
    gu === "Very Guessable"     ? "16%" :
    gu === "Somewhat Guessable" ? "32%" :
    gu === "Safely Unguessable" ? "48%" :
    gu === "Very Unguessable"   ? "64%" : "0%"
 );
})


pass.on(["encryptedPass", "keyIvIsValid"], pl => {
  document.getElementById("GeneratePass-encrypted-pass")!.textContent = pass.get("encryptedPass");
    if(pass.get("encryptedPass") !== "" && pass.get("keyIvIsValid") === true) {
      (document.getElementById("GeneratePass-encrypted-pass")! as HTMLButtonElement).disabled  = false;
      (document.getElementById("GeneratePass-encrypted-pass-copy")! as HTMLButtonElement).disabled  = false;
      document.getElementById("GeneratePass-encrypted-pass-copy")!.textContent = "tap to copy";
    } else {
      (document.getElementById("GeneratePass-encrypted-pass")! as HTMLButtonElement).disabled  = true;
      (document.getElementById("GeneratePass-encrypted-pass-copy")! as HTMLButtonElement).disabled  = true;
      document.getElementById("GeneratePass-encrypted-pass-copy")!.textContent = "";  
    }

})


// copy Encrypted Pasword
document.getElementById("GeneratePass")!.addEventListener("click",(e)=>{
   if((e!.target as HTMLInputElement).matches("#GeneratePass-encrypted-pass, #GeneratePass-encrypted-pass-copy")){
      if(pass.get("encryptedPass") !== "" && pass.get("keyIvIsValid") === true) {
         navigator.clipboard.writeText(pass.get("encryptedPass"));  
         showToast(); 
      }
   }
});


pass.updateRPassword();
</script>

<style>

#box {
  display: flex;
  align-items: center;
  transition: width 0.2s, background-color 0.2s, background-position 0.2s ;
  border-radius: var(--radius-a);
  background-color: red; 
  height: var(--size-xs4);
  background-image: linear-gradient(to right, #f21616, #f02f11, #d47a20, #719deb, #6977e3, #7643b1, #5d43b1);
  background-clip: content-box;
  background-size: 300% var(--size-sm0);
  --box-w: 36%;
  --box-p: 0%;
  width: var(--box-w);
  background-position: var(--box-p);
  place-content: baseline;
}

#box-place-holder{
  display: flex;
  border-radius: var(--radius-a);
  align-items: center;
  background-color: oklch( var(--gray-95) / 0.2); 
  height: var(--size-xs4);
  width: 100% ;
  box-shadow: inset 0px 1px 2px oklch(0% 0 0 / 0.3) ;
}

</style>