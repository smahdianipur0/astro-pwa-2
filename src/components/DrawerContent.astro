---
import Card from "../components/Card.astro";
---

<div style="
display: flex; 
flex-direction: column; 
align-items: center; 
gap: var(--gap-x04); 
margin-inline: var(--gap-x04)
height: 85%;
overflow-y: scroll;
padding-top: var(--gap-x02);
padding-inline: var(--gap-x02);">
  <Card iden="entries-list-card" >
  <div style="display: flex; flex-direction: column; width: 100%;" class="input-group prose">
    <div style="display: flex; flex-direction: row;">
      <input id="auto-pass-entry" type="checkbox"> 
      <label style="place-self: center; margin-left: var(--gap);" for="auto-pass-entry">Enter Password Manually</label>
    </div>
    <input type="text" id="passwordInput" placeholder="Password" style="margin-top: var(--gap-x03);" readonly />
    <input style="margin-top: var(--gap-x03);" type="text" id="titleInput" placeholder="Title"/>
    <button style="margin-top: var(--gap-x03);"id="addEntryButton">Add</button>
  </div>
  </Card>


  <div class="entries-list" id="entriesList"></div>
</div>

<script>
import {
	createPasswordEntry,
	getAllPasswordEntries,
	deletePasswordEntry,
	type PasswordEntry,} from "../utils/surrealdb";
import { waitForElement } from "../utils/waitForElement";
import { password } from "./signals";
import {showToast} from "../components/signals.ts" 
import { createSignal, createEffect } from "solid-js";


// signals
const [entries, setEntries] = createSignal<PasswordEntry[]>([])
const [newTitle, setNewTitle] = createSignal('')
const [newPassword, setNewPassword] = createSignal('');


// initialize entries
(async () => {setEntries(await getAllPasswordEntries() ?? []);})();

createEffect(() => {
  setNewPassword(password());
});



// await elements
(async () => {
	const inputGroup    = (await waitForElement(".input-group"))   as HTMLElement;
	const entriesList   = (await waitForElement("#entriesList"))   as HTMLElement;
	const passwordInput = (await waitForElement("#passwordInput")) as HTMLInputElement;
	const titleInput    = (await waitForElement("#titleInput"))    as HTMLInputElement;



  // render entries based on signal
	createEffect(() => {
		entriesList.innerHTML = "";
		[...(entries() ?? [])].reverse().forEach((entry) => {
			const entryElement = document.createElement("div");
			entryElement.className = "entry-item";
			entryElement.innerHTML = `
        <div>
          <p class="hint">${entry.title || 'untitled'}</p>
          <button class="copy-button" id="${entry.password ?? ''}">${entry.password}</button>
        </div>
        <div class="s-container">
          <details name="delete">
            <summary></summary>
            <button class="delete-button" id="${entry.id?.id ?? ''}"> Delete</button>
          </details>
        </div>
      `;
			entriesList.appendChild(entryElement);
		});
	});

  // delete entry
	entriesList.addEventListener("click", (e) => {
		const deleteButton = (e!.target as HTMLInputElement).closest(".delete-button");
		if (deleteButton) {
			(async () => {
				await deletePasswordEntry(deleteButton.id);
				setEntries((await getAllPasswordEntries()) ?? []);
			})();
		}
    
    const copyButton = (e!.target as HTMLInputElement).closest(".copy-button");
		if (copyButton) {
			(async () => {
				navigator.clipboard.writeText(copyButton.id);  
         showToast();
			})();
		}
	});

  // add entry
	inputGroup.addEventListener("click", (e) => {
		if ((e!.target as HTMLInputElement).matches("#addEntryButton")) {
			(async () => {
				await createPasswordEntry(newTitle(), newPassword());
				setNewTitle("");
        if ((document.getElementById("auto-pass-entry") as HTMLInputElement).checked){
				  setNewPassword("");
				}
				setEntries((await getAllPasswordEntries()) ?? []);
			})();
		}

    // auto-pass entry
    if ((e!.target as HTMLInputElement).matches("#auto-pass-entry")) {
      if ((e.target as HTMLInputElement).checked) {
         (document.getElementById("passwordInput")! as HTMLInputElement).readOnly = false;
         setNewPassword('');
      } else {
        (document.getElementById("passwordInput")! as HTMLInputElement).readOnly = true;
        createEffect(() => {
          setNewPassword(password());
        });
      }
   }
	});

  // bind input values to signals
  inputGroup.addEventListener("input", (e) => {
    if ((e!.target as HTMLInputElement).matches("#titleInput")) {
      setNewTitle((e!.target as HTMLInputElement).value);
    } else if ((e!.target as HTMLInputElement).matches("#passwordInput")) {
      setNewPassword((e!.target as HTMLInputElement).value);
    }
  });


	// bind signals to input values
	createEffect(() => {
		titleInput.value = newTitle();
	});

	createEffect(() => {
		passwordInput.value = newPassword();
	});


	// update add entry button state
	createEffect(() => {
		if (!newPassword()) {
			(document.getElementById("addEntryButton")! as HTMLButtonElement).disabled = true;
		} else {
			(document.getElementById("addEntryButton")! as HTMLButtonElement).disabled = false;
		}
	});

})();

</script> 


<style is:global>
  .entries-list{
    display: flex;
    flex-direction: column;
    width: 100%;
    align-items: center;
  }
  
  .entry-item{
    display: flex;
    place-content: space-between;
    width: min(100%, 65ch);
    background-color: oklch(var(--gray-15) / 1);
    border-radius: 0;
    padding: var(--default-padding);
    margin: 0 1ch;
    position: relative;
  }

  .entries-list > :first-child{
    border-top-left-radius: var(--radius-b);
    border-top-right-radius: var(--radius-b);
    margin-top: 1ch;
  }

  .entries-list > :last-child{
    border-bottom-left-radius: var(--radius-b);
    border-bottom-right-radius: var(--radius-b);
    margin-bottom: var(--gap-x06);
  }

  .entries-list > :last-child::after{
    content: 'tap on passwords to copy';
    position: absolute;
    bottom: 0;
    transform: translateY(var(--gap-x06));
    font-size: var(--small-font);
    color: oklch(var(--gray-50) / 1);
  }

  .entries-list > :not(:last-child){
    border-bottom:1px solid oklch(var(--gray-25) / 1);
  }

  .s-container  {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  }

details {
  margin: 0;
  position: relative;
  display: inline-block;
}

details summary::-webkit-details-marker {
  display: none;
}

summary {
  display: flex;
  position: relative;
  cursor: pointer;
  user-select: none;
  min-width: max-content;
  align-items: center;
}

@keyframes details-show {
  from {
    opacity: 0;
    transform: translateY(-50%) translateX(0.5em);
  }
  to {
    opacity: 1;
    transform: translateY(-50%) translateX(0);
  }
}

details[open] > *:not(summary) {
  animation: details-show 150ms ease-in-out forwards;
}

summary::before {
  content: '🗑️';
  color: var(--danger);
  font-size: 100%;
}

details[open] > summary::before {
  content: 'Cancel';
  color: oklch(var(--gray-95) / 1);
  font-size: var(--small-font);
}

details[open] > .s-container {
  width: 10ch;
}



.delete-button {
  margin-inline: 1ch;
  color: var(--danger);
  font-size: var(--small-font);
}

details[open] .delete-button {
  position: absolute;
  right: 100%;
  top: 50%;
  transform: translateY(-50%);
  margin-right: var(--gap);
}

</style>
