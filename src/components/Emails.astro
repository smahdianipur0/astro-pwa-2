<fieldset class="box-shadow " id="Emails" >
    <legend>Frequently Used Emails</legend>

    <div
        class="prose"
        style="display: flex; 
        gap: var(--size-sm0); 
        justify-content: space-between;">

        <input
            autocomplete="off"
            id="Email-input"
            type="text"
            style="width: 100%;"
            placeholder="Email" />

        <button 
            id="Email-add" 
            style="width: fit-content; 
            white-space: nowrap;" disabled > 
            Add</button>
    </div>

    <menu
        id="Email-list"
        style="padding-top: var(--size-sm3); height: 100%; margin-bottom: var(--size-md2);">

        <li style="background-color: transparent; padding-inline: 0px;">
            <button
                class="not-prose ellipsis shiny-text"
                style="text-align: start; width: var(--size-xl2);">
                name@gmail.com</button>

            <div class="not-prose s-container">
                <details  name="delete-item" class="right-to-left">
                    <summary class="right-to-left shiny-text"></summary>
                </details>
            </div>
        </li>

        <li style="background-color: transparent; padding-inline: 0px;">
            <button
                class="not-prose ellipsis shiny-text"
                style="text-align: start; width: var(--size-xl2);">
                name@yahoo.com</button>

            <div class="not-prose s-container">
                <details name="delete-item" class="right-to-left">
                    <summary class="right-to-left shiny-text"></summary>
                </details>
            </div>
        </li>

        <li style="background-color: transparent; padding-inline: 0px;">
            <button
                class="not-prose ellipsis shiny-text"
                style="text-align: start; width: var(--size-xl2);">
                name@outlook.com</button>

            <div class="not-prose s-container">
                <details name="delete-item" class="right-to-left">
                    <summary class="right-to-left shiny-text"></summary>
                </details>
            </div>
        </li>
    </menu>
</fieldset>

<script>

import { dbCreate, dbReadAll, dbDelete , type ReadAllResultTypes} from "../utils/surrealdb-indexed";
import { el } from "../utils/elementUtils";
import { showToast } from "../logic/misc.ts";
import { createStore } from "../utils/state";

const email = createStore({
    state: { 
        emailInput: "" ,
        emailList: ([]) as ReadAllResultTypes["Emails"] | [],
    },
    methods: {
        setEmailInput(value: string) { this.set('emailInput', value); },
        async updateEmailList(){this.set('emailList',await dbReadAll("Emails") ?? []) }
    }, 
});


document.getElementById("Emails")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#Email-input")){
       const value = (e!.target as HTMLInputElement).value;
       email.setEmailInput(value.toString());
       if(email.get("emailInput") === "") {
        (document.getElementById("Email-add")! as HTMLInputElement).disabled  = true;  
         } else {
        (document.getElementById("Email-add")! as HTMLInputElement).disabled  = false; 
     } 
    }
});

document.getElementById("Emails")!.addEventListener("click", (e) => {
  if ((e!.target as HTMLInputElement).matches("#Email-add")) {
    (async () => {
      await dbCreate("Emails:create", {email:email.get("emailInput"), crreatedAt: new Date().toISOString()})
      email.updateEmailList()
    })();
  }

  const deleteButton = (e!.target as HTMLInputElement).closest("[data-action='delete']");
  if (deleteButton) {
    (async () => {
      await dbDelete(deleteButton.id);
      email.updateEmailList()
    })();
  }

  const copyButton = (e!.target as HTMLInputElement).closest("[data-action='copy']");
  if (copyButton) {
    (async () => {
      navigator.clipboard.writeText(copyButton.id);  
       showToast();
    })();
  }
});

email.on(["emailList"], ({value}) => {  
  email.setEmailInput("");
  (document.getElementById("Email-input") as HTMLInputElement).value = "";
  (document.getElementById("Email-add") as HTMLInputElement).disabled = true;
  document.getElementById("Email-list")!.textContent = '';
  const fragment = document.createDocumentFragment();
  
  (value ?? [])
  .sort((a, b) => new Date(b.crreatedAt).getTime() - new Date(a.crreatedAt).getTime())
  .forEach((entry) => {
    fragment.append(
      el.c('li', { style: 'background-color:transparent; padding-inline: 0;',append: [

          el.c('div', { append: [
              el.c('button', { dataset: {action: 'copy'}, 
                className: 'not-prose ellipsis',
                style:"text-align: start; width: var(--size-xl2); color: oklch(var(--gray-95))",
                id: entry.email ?? '',
                textContent: entry.email ?? ''
              })
          ]}),

          el.c('div', {className: 'not-prose s-container', append: [
            el.c('details', {name: 'delete-item',className: 'right-to-left', append: [
              el.c('summary', { className: 'right-to-left' }),
              el.c('button', { dataset: {action: 'delete' },
                  id: entry.id ?? '',   
                  textContent: ' Delete'
                })
            ]})
          ]})
        ]})
    );
  });
  
  document.getElementById("Email-list")!.append(fragment);
});

email.updateEmailList()
</script>

<style is:global>

#Email-list > :last-child::after {
  content: 'tap on email to copy';
  position: absolute;
  bottom: 0;
  transform: translateY(var(--size-md2));
  font-size: var(--font-sm1);
  color: oklch(var(--gray-50) / 1);
}

</style>
