---
const examples = ["name@gmail.com", "name@yahoo.com", "name@outlook.com"]
---

<fieldset class="box-shadow " id="Emails" >
    <legend>Frequently Used Emails</legend>

    <div
        class="prose"
        style="display: flex; 
        gap: var(--size-sm0); 
        justify-content: space-between;">

        <input
            autocomplete="off"
            id="Email-input"
            type="text"
            style="width: 100%;"
            placeholder="Email" />

        <button 
            id="Email-add" 
            style="width: fit-content; 
            white-space: nowrap;" disabled > 
            Add</button>
    </div>


    <menu id="Email-list" 
        style="background: transparent; 
        padding-top: var(--size-sm3); 
        height: 100%; 
        margin-bottom: var(--size-md2);">

        {examples.map((item) => (

            <li style="width:100%;background-color:transparent;padding-inline:0;">
                <div>
                    <button class="not-prose shiny-text" style="text-align:start;">{item} </button>
                </div>
                <div class="flex-spread-childs">
                    <div class="not-prose flex-with-gap" style="justify-content: flex-end;">
                        <button class="not-prose"> 
                            <div class="text-as-button blink" style="margin-right:calc(var(--size-sm0)* -1);">
                                <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M8 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM18 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" fill="oklch(var(--gray-95))"></path></svg>
                            </div>
                        </button>
                    </div>

                    <div style="width: var(--size-md2); display: flex; justify-content: flex-end;">
                        <div class="swapy-handle" style=""></div>
                    </div>
                </div>
            </li>

        ))}
    </menu>

</fieldset>

<script>
import { showToast } from "../logic/misc.ts";
import { Emails } from './Emails'
import { render } from "solid-js/web"
import { email } from '../logic/email'
import { createSwapy } from 'swapy'
import { dbUpdate } from "../utils/surrealdb-indexed";



document.getElementById("Emails")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#Email-input")){
       const value = (e!.target as HTMLInputElement).value;
       email.setEmailInput(value.toString());
       if(email.get("emailInput") === "") {
        (document.getElementById("Email-add")! as HTMLInputElement).disabled  = true;  
         } else {
        (document.getElementById("Email-add")! as HTMLInputElement).disabled  = false; 
     } 
    }
});

document.getElementById("Emails")!.addEventListener("click", (e) => {
    if ((e!.target as HTMLInputElement).matches("#Email-add")) { 
        email.addEmail(email.get("emailInput"))
    }

    const copyButton = (e!.target as HTMLInputElement).closest("[data-action='copy']");
    if (copyButton) {
        (async () => {
            navigator.clipboard.writeText(copyButton.id);  
            showToast();
        })();
    }
      const deleteButton = (e!.target as HTMLInputElement).closest("[data-action='delete']");
      if (deleteButton) {
        (async () => {
          email.addDelete(deleteButton.id);
        })();
      }
});

const container = document.getElementById("Email-list")  as HTMLElement

const swapy = createSwapy(container, {
  animation: 'dynamic'
});

email.on(["emailList"], ({ value }) => {
    email.setEmailInput("");
    (document.getElementById("Email-input") as HTMLInputElement).value = "";
    (document.getElementById("Email-add")   as HTMLInputElement).disabled = true;
    container.textContent = "";

    (value ?? [])
        .sort((a, b) => new Date(b.crreatedAt).getTime() - new Date(a.crreatedAt).getTime())
        .forEach((entry) => {
            render(() => Emails(entry), document.getElementById("Email-list") as HTMLElement);
        });
    
    swapy.update()

});

swapy.onSwapEnd((event) => {
    event.slotItemMap.asArray.forEach((item) =>{(async () => {
        await dbUpdate("Emails:update",{id:item.item, crreatedAt:item.slot})      
        })();      
    })
})

email.updateEmailList();

</script>

<style is:global>

#Email-list > :last-child::after {
  content: 'tap on email to copy';
  position: absolute;
  bottom: 0;
  transform: translateY(var(--size-md2));
  font-size: var(--font-sm1);
  color: oklch(var(--gray-50) / 1);
}

</style>