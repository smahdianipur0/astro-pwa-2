<div class="prose" style="display: flex;
gap: var(--gap);
justify-content: space-between;">
  <input autocomplete="off" id="email_entry" type="text" style="
  margin-bottom: var(--gap);
  width: 100%;" placeholder="Email">
  <button id="add_email" style="margin-bottom: var(--gap);
  width: fit-content;
  white-space: nowrap;" disabled>Add</button>
</div>

<div class="entries-list not-prose" id="emails-list" style="
padding-inline: var(--gap-x02);
height:100%;">
<div style="display: flex; gap: 2ch; flex-direction: column; padding-top: var(--gap-x02);" class="max-width">
<div class="skeleton"></div>
<div class="skeleton" style="width: 17ch;"></div>
<div class="skeleton" style="width: 22ch;"></div>
</div>
</div>


<script>

import { createSignal, createEffect } from 'solid-js';
import { dbCreate, dbReadAll, dbDelete , type EmailEntry } from "../utils/surrealdb-indexed";
import { element } from "../utils/elementUtils";
import { showToast } from "../components/homeLogic.ts";

const [emailEntery, setEmailEntery] = createSignal("");
const [emailList, setEmaillist] = createSignal<EmailEntry[]>([]);


document.getElementById("emails")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#email_entry")){
       const value = (e!.target as HTMLInputElement).value;
       setEmailEntery(value.toString());
       if(emailEntery() === "") {
        (document.getElementById("add_email")! as HTMLInputElement).disabled  = true;  
         } else {
        (document.getElementById("add_email")! as HTMLInputElement).disabled  = false; 
     } 
    }
});



document.getElementById("emails")!.addEventListener("click", (e) => {
  if ((e!.target as HTMLInputElement).matches("#add_email")) {
    (async () => {
      await dbCreate("Emails:create", {email:emailEntery()})
      setEmaillist((await dbReadAll("Emails") ) ?? []);
    })();
  }

  const deleteButton = (e!.target as HTMLInputElement).closest(".delete-button");
  if (deleteButton) {
    (async () => {
      await dbDelete("Emails:delete", deleteButton.id);
      setEmaillist((await dbReadAll("Emails") ) ?? []);
    })();
  }

  const copyButton = (e!.target as HTMLInputElement).closest(".copy-button");
  if (copyButton) {
    (async () => {
      navigator.clipboard.writeText(copyButton.id);  
       showToast();
    })();
  }
});


setEmaillist((await dbReadAll("Emails") ) ?? []);

createEffect(() => {
  setEmailEntery("");
  (document.getElementById("email_entry") as HTMLInputElement).value = "";
  (document.getElementById("add_email") as HTMLInputElement).disabled = true;
  document.getElementById("emails-list")!.textContent = '';
  const fragment = document.createDocumentFragment();
  
  (emailList() ?? []).reverse().forEach((entry) => {
    fragment.append(
      element.configure('div', { className: 'entry-item',
        style: 'background-color:transparent; padding-inline: 0;',
        append: [

          element.configure('div', { append: [
              element.configure('button', {
                className: 'copy-button ellipsis',
                id: entry.email ?? '',
                textContent: entry.email ?? ''})
          ]}),

          element.configure('div', {className: 's-container', append: [
            element.configure('details', {name: 'delete-item',className: 'right-to-left',append: [

              element.configure('summary', { className: 'right-to-left', }),
              element.configure('button', { className: 'delete-button', 
                id: entry.id?.id ?? '',
                textContent: ' Delete'})
            ]})
          ]})
        ]
      })
    );
  });
  
  document.getElementById("emails-list")!.append(fragment);
});


</script>

<style is:global>



#emails-list > :last-child::after {
  content: 'tap on email to copy';
  position: absolute;
  bottom: 0;
  transform: translateY(var(--gap-x06));
  font-size: var(--small-font);
  color: oklch(var(--gray-50) / 1);
}

</style>
