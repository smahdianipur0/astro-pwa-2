---
const examples = ["name@gmail.com", "name@yahoo.com", "name@outlook.com"]
---

<fieldset class="box-shadow " id="Emails" >
    <legend class="flex-spread-childs" style="width: 100%;">Emails / Aliases

        <label 
            for="Email-edit" 
            id="Email-edit-label" 
            style="font-size: var(--font-sm4);
            width: fit-content;"
            class="secondary-btn"></label>

        <input type="checkbox" id="Email-edit" class="hide-checkbox" >
        
    </legend>


    <div 
        id="Email-input-div"
        class="prose"
        style="display: none; 
        gap: var(--size-sm0); 
        justify-content: space-between;
        padding-block: var(--size-sm3);">

        <input
            autocomplete="off"
            id="Email-input"
            type="text"
            style="width: 100%;"
            placeholder="Email" />

        <button 
            id="Email-add" 
            style="width: fit-content; 
            white-space: nowrap;" disabled > 
            Add</button>
    </div>


    <menu id="Email-list" 
        style="background: transparent; 
        max-height: var(--size-xl1); 
        margin-bottom: var(--size-md2);
        overflow-y: scroll;
        overflow-x: hidden;
        touch-action: manipulation;">

        {examples.map((item) => (

            <li style="width:100%;background-color:transparent;padding-inline:0;">
                <div>
                    <button class="not-prose shiny-text" style="text-align:start;">{item} </button>
                </div>
                <div class="flex-spread-childs">
                    <div class="not-prose flex-with-gap" style="justify-content: flex-end;">
                        <button class="not-prose"> 
                            <div class="text-as-button blink" style="margin-right:calc(var(--size-sm0)* -1);">
                                <svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M8 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM18 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" fill="oklch(var(--gray-95))"></path></svg>
                            </div>
                        </button>
                    </div>

                    <div style="width: var(--size-md2); display: flex; justify-content: flex-end;">
                        <div class="swapy-handle" style=""></div>
                    </div>
                </div>
            </li>

        ))}
    </menu>

</fieldset>

<script>
import { showToast } from "../logic/misc.ts";
import { Emails } from './Emails'
import { render } from "solid-js/web"
import { email } from '../logic/email'
import { createSwapy } from 'swapy'
import { dbUpdate, toRecordId } from "../utils/surrealdb-indexed";



document.getElementById("Emails")!.addEventListener("input",(e)=>{
    if((e!.target as HTMLInputElement).matches("#Email-input")){
       const value = (e!.target as HTMLInputElement).value;
       email.setEmailInput(value.toString());
       if(email.get("emailInput") === "") {
        (document.getElementById("Email-add")! as HTMLInputElement).disabled  = true;  
         } else {
        (document.getElementById("Email-add")! as HTMLInputElement).disabled  = false; 
     } 
    }
});

document.getElementById("Emails")!.addEventListener("click", (e) => {
    if ((e!.target as HTMLInputElement).matches("#Email-add")) { 
        email.addEmail(email.get("emailInput"))
    }

    const copyButton = (e!.target as HTMLInputElement).closest("[data-action='copy']");
    if (copyButton) {
        (async () => {
            navigator.clipboard.writeText(copyButton.id);  
            showToast();
        })();
    }
      const deleteButton = (e!.target as HTMLInputElement).closest("[data-action='delete']");
      if (deleteButton) {
        const deletebuttonId = toRecordId(deleteButton.id);
        deletebuttonId && (async () => {
          email.deleteEmail( deletebuttonId);
        })();
      }
});

document.getElementById("Emails")!.addEventListener("change",(e)=>{
    if((e!.target as HTMLInputElement).matches("#Email-edit")){
        email.setIsEditing((e!.target as HTMLInputElement).checked)
    };
});

const container = document.getElementById("Email-list")  as HTMLElement

const swapy = createSwapy(container, {
    animation: 'dynamic',
    autoScrollOnDrag: true,
});

swapy.enable(false);

email.on(["emailList"], ({value}) => {
    email.setEmailInput("");
    (document.getElementById("Email-input") as HTMLInputElement).value = "";
    (document.getElementById("Email-add")   as HTMLInputElement).disabled = true;
    container.textContent = "";

    (value ?? [])
        .sort((a, b) => new Date(b.crreatedAt).getTime() - new Date(a.crreatedAt).getTime())
        .forEach((entry) => {
            render(() => Emails(entry, email.get("isEditing")), document.getElementById("Email-list") as HTMLElement);
        });
    
    swapy.update()

});



email.on(["isEditing"], ({value}) =>{ 

    (document.getElementById("Email-input-div") as HTMLElement).style.display = value ? "flex" : "none";
    (document.getElementById("Email-list") as HTMLElement).style.maxHeight = value ? "unset" : "var(--size-xl1)"
    swapy.enable(value);

    container.textContent = "";

    (email.get("emailList")?? [])
    .sort((a, b) => new Date(b.crreatedAt).getTime() - new Date(a.crreatedAt).getTime())
    .forEach((entry) => {
        render(() => Emails(entry, value), document.getElementById("Email-list") as HTMLElement);
    });

    swapy.update()
})


swapy.onSwapEnd((event) => {
    event.slotItemMap.asArray.forEach((item) =>{(async () => {
        const emailId = toRecordId(item.item);
        if (!emailId) {return}
            await dbUpdate("Emails:update",{id:emailId, crreatedAt:item.slot}); 
        })();      
    })
    email.updateEmailList();
})

email.updateEmailList();

</script>

<style is:global>


#Email-list:has(> li)::after {
  content: 'tap on email to copy';
  position: absolute;
  bottom: var(--size-md2);
  left: var(--size-sm4);
  font-size: var(--font-sm4);
  color: oklch(var(--gray-50) / 1);
}

#Email-edit-label::after{
    content: "Edit";
}

:root:has(#Email-edit:checked) #Email-edit-label::after{
  content: "Done";
}

#Email-edit-label::before{
    content: '';
    margin-inline-end: var(--size-xs2);
    background-image: url('data:image/svg+xml,<svg width="var(--size-sm3)" height="var(--size-sm3)" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M21.03 2.97a3.578 3.578 0 0 1 0 5.06L9.062 20a2.25 2.25 0 0 1-.999.58l-5.116 1.395a.75.75 0 0 1-.92-.921l1.395-5.116a2.25 2.25 0 0 1 .58-.999L15.97 2.97a3.578 3.578 0 0 1 5.06 0ZM15 6.06 5.062 16a.75.75 0 0 0-.193.333l-1.05 3.85 3.85-1.05A.75.75 0 0 0 8 18.938L17.94 9 15 6.06Zm2.03-2.03-.97.97L19 7.94l.97-.97a2.079 2.079 0 0 0-2.94-2.94Z" fill="%23fff"/></svg>');
    background-position: right;
    width: var(--size-sm3);
    height: var(--size-sm3);
}

</style>