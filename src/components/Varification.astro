<fieldset class="box-shadow expandable" id="Varification"> 
    <legend>Varification Code</legend>

    <div class="flex-spread-childs">
        <label for="Varification-ops">Varification key Format</label>

        <select id="Varification-ops" name="detect mode">
            <option selected>Auto</option>
            <option>Plain</option>
            <option>Encrypted</option>
        </select>
    </div>

    <textarea 
        id="Varification-input" 
        class=" dent-shadow" 
        style=" margin-top: var(--size-sm1);" 
        rows="2" 
        placeholder="Varification Key"></textarea>

    <div id="Varification-target" style="overflow: hidden;">

        <div             
            style="font-size: var(--font-lg1);
            display: flex;
            position: relative;
            justify-content: space-between;
            align-items: center;">

                <div class="skeleton" style="width:var(--size-lg4)"></div>
                <div class="skeleton" style="width:var(--size-lg1);"></div>
                       
        </div>
    </div>
</fieldset>

<script>

import { pass } from '../logic/pass';
import { showToast } from '../logic/misc'
import { el } from '../utils/elementUtils'

  
document.getElementById("Varification")!.addEventListener("input",(e)=>{
   if((e!.target as HTMLInputElement).matches("#Varification-input")){
      const value = (e!.target as HTMLInputElement).value;
      pass.setVarificationKey(value.toString())
   }
   if((e!.target as HTMLInputElement).matches("#Varification-ops")){
      const value = (e!.target as HTMLInputElement).value;
      pass.setKeyMode(value.toString())
   }
});


const parentStyle = "color: oklch(var(--gray-95)); display: flex; position: relative; justify-content: space-between; align-items: center;"
const detailStyle = "line-height: var(--size-sm4);font-weight: 300;font-size:var(--font-lg1); height:var(--size-sm4);"
const resStyle =    "font-variant-numeric: tabular-nums; font-size:var(--font-lg1);"

pass.on(["otpRes","keyIvIsValid","varificationKey"], pl => {
    const target = document.getElementById("Varification-target") as HTMLSelectElement
    target.textContent = "";

    const fragment = document.createDocumentFragment();

    switch (true) {
        case (pass.get("secretKey") === ""):
            document.getElementById("Varification")!.style.maxHeight = "var(--size-xl2)"
          break;
 
        case (pass.get("secretKey") !== pass.get("varificationKey") && (!pass.get("keyIvIsValid") || pass.get("secretKey") === "Invalid Credentials")):
            fragment.append( el.c( "div", { style: parentStyle, append:[
                el.c("div", { id:"Varification-target-detail",style:detailStyle,textContent: pass.get("secretKey")})
            ]}));
            document.getElementById("Varification")!.style.maxHeight = "var(--size-xl5)"
            break;
 
        case (pass.get("otpRes") === "The provided key is not valid."):
            fragment.append( el.c( "div", { style: parentStyle, append:[
                el.c("div", {id:"Varification-target-detail", style:detailStyle , textContent: pass.get("otpRes")})
            ]}));
            document.getElementById("Varification")!.style.maxHeight = "var(--size-xl5)"
            break;

 
        default:
            fragment.append( el.c( "div", { style: parentStyle, append:[
                el.c("div", { id:"Varification-target-detail" ,style:detailStyle,textContent: "Varification Code:"}),

                el.c("div", {
                    id:"Varification-target-res",
                    name:"copy code",
                    className: "text-as-button",
                    style:resStyle,
                    textContent: pass.get("otpRes")})
            ]}));

            fragment.append(el.c("small", {
                id:"Varification-hint", 
                style:"height:var(--size-sm3);",
                textContent: `This code is valid for the next ${pass.get("countDown")} seconds.`
            }));

            fragment.append(el.c("small", {
                id:"Varification-copy", 
                style:"height:var(--size-sm3);",
                textContent: "Tap to copy"
            }))

            document.getElementById("Varification")!.style.maxHeight = "var(--size-xl5)"
   }

    target.append(fragment);
});

pass.on(["countDown"], ({value}) =>{
    if (document.getElementById("Varification-target-detail")!.textContent === "Varification Code:"){
        document.getElementById("Varification-hint")!.textContent = `This code is valid for the next ${pass.get("countDown")} seconds.`;
    }
})

document.getElementById("Varification")!.addEventListener("click", (e) => {
   if (
      (e!.target as HTMLInputElement).matches("#Varification-target-detail ,#Varification-target-res, #Varification-copy",) &&
      document.getElementById("Varification-target-res")!.textContent !== ""
   ) {
      navigator.clipboard.writeText(pass.get("otpRes"));
      showToast();
   }
});

</script>


<style>

.expandable {
    max-height: var(--size-xl2);
    transition: max-height 0.3s var(--appear-subtle);
}

</style>