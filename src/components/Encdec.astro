---
import Tabs from '../components/ui/Tabs.astro';
---
<fieldset class="box-shadow" id="encryption"><legend>AES Encryption</legend>
   <Tabs name="encdec" tab1Label="Encrypt" tab2Label="Decrypt" >
      <fragment class="prose" style="color: oklch(var(--gray-95) );" slot="tab1">

         <textarea
            id="plain_text" 
            class=" dent-shadow" 
            style="margin-top: var(--size-md4); margin-bottom: var(--size-sm3);" 
            rows="2" 
            placeholder="Plain Text"></textarea>

         <label 
            style=" margin-bottom: var(--size-sm0); font-size: var(--font-sm1); opacity: 0.6;">
            Encrypted Text : </label>

         <button 
            class="not-prose max-width text-as-button" 
            style="word-wrap: break-word; text-align:justify;" 
            id="result_e"></button>

      </fragment>


      <fragment class="prose" style="color: oklch(var(--gray-95) );" slot="tab2">

         <textarea 
            id="cipher_text" 
            rows="2" 
            placeholder="Cipher Text"
            style="margin-top: var(--size-md4); margin-bottom: var(--size-sm3);"></textarea>

         <label 
            style="margin-bottom: var(--size-sm0); font-size: var(--font-sm1); opacity: 0.6;">
            Decrypted Text :</label>

         <button 
            class="not-prose max-width text-as-button" 
            style="word-wrap: break-word; text-align:justify;"
            id="result_d"></button>

      </fragment>
   </Tabs>
</fieldset>

<script>

import { showToast } from "../logic/misc.ts";
import { pass } from '../logic/pass';

// plain and cipher text input
document.getElementById("encryption")!.addEventListener("input",(e)=>{
   if((e!.target as HTMLInputElement).matches("#plain_text")){
      const value = (e!.target as HTMLInputElement).value;
      pass.setPlainText(value.toString());
   }

   if((e!.target as HTMLInputElement).matches("#cipher_text")){
      const value = (e!.target as HTMLInputElement).value;
      pass.setCipherText(value.toString())
   }
});


// display results and disable copying false results
const resultE = document.getElementById("result_e") as HTMLInputElement;
const resultD = document.getElementById("result_d") as HTMLInputElement;

pass.on(["resultE"], ({ value }) => {
   resultE.textContent = value || "Enter Plain Text";
   const invalidValues = ["IV is not 16 Characters", "Key is not 16 Characters", ""];
   resultE.disabled = invalidValues.includes(value);
});

pass.on(["resultD"], ({ value }) => {
   resultD.textContent = value || "Enter Cipher Text";
   const invalidValues = ["IV is not 16 Characters", "Key is not 16 Characters","Invalid Credentials", ""];
   resultD.disabled = invalidValues.includes(value);
});


// copy encryption and decryption
document.getElementById("encryption")!.addEventListener("click",(e)=>{
   if((e!.target as HTMLInputElement).matches("#result_e") &&
      ((document.getElementById("result_e")! as HTMLInputElement).disabled  === false )){
      navigator.clipboard.writeText(pass.get("resultE"));  
      showToast();
   }

   if((e!.target as HTMLInputElement).matches("#result_d") &&
      ((document.getElementById("result_d")! as HTMLInputElement).disabled  === false )){
      navigator.clipboard.writeText(pass.get("resultD"));  
      showToast();
   }
});

</script>