---
import Tabs from '../components/ui/Tabs.astro';
---

<Tabs name="encdec" tab1="enc" tab2="dec" content1="cenc" content2="cdec">
   <fragment class="prose" style="color: oklch(var(--gray-95) );" slot="tab1">

      <textarea 
         id="plain_text" 
         class=" dent-shadow" 
         style="margin-top: var(--gap-x02); margin-bottom: var(--gap-x04);" 
         rows="2" 
         placeholder="Plain Text"></textarea>

      <label 
         style=" margin-bottom: var(--gap); font-size: var(--font-sm1); opacity: 0.6;">
         Encrypted Text : </label>

      <button 
         class="not-prose max-width text-as-button" 
         style="word-wrap: break-word; text-align:justify;" 
         id="result_e"></button>

   </fragment>


   <fragment class="prose" style="color: oklch(var(--gray-95) );" slot="tab2">

      <textarea 
         id="cipher_text" 
         rows="2" 
         placeholder="Cipher Text"
         style="margin-top: var(--gap-x02); margin-bottom: var(--gap-x04);"></textarea>

      <label 
         style="margin-bottom: var(--gap); font-size: var(--font-sm1); opacity: 0.6;">
         Decrypted Text :</label>

      <button 
         class="not-prose max-width text-as-button" 
         style="word-wrap: break-word; text-align:justify;"
         id="result_d"></button>

   </fragment>
</Tabs>

<script>

import { createSignal, createEffect } from 'solid-js';
import { encrypt, decrypt } from "../pkg/rust_lib";
import { key, iv } from "../components/credentialsLogic.ts";
import { showToast } from "../components/homeLogic.ts";


// encryption signals
const [plainText, setPlainText]     = createSignal("");
const [cipherText, setCipherText]   = createSignal("");
const [resultE, setResultE]         = createSignal("");
const [resultD, setResultD]         = createSignal("");


document.getElementById("encryption")!.addEventListener("input",(e)=>{
   if((e!.target as HTMLInputElement).matches("#plain_text")){
      const value = (e!.target as HTMLInputElement).value;
      setPlainText(value.toString());
   }

   if((e!.target as HTMLInputElement).matches("#cipher_text")){
      const value = (e!.target as HTMLInputElement).value;
      setCipherText(value.toString());
   }
   
});


// encryption effect
createEffect(() => {
   setResultE(encrypt(key(), iv(), plainText()));
   if ( key() !== "" && iv() !== "") {
      document.getElementById("result_e")!.textContent = resultE();
   }

   if (resultE() === "") {
      document.getElementById("result_e")!.textContent = "Enter Plain Text";
   }
});


// decryption effect
createEffect(() => {
   setResultD(decrypt(key(), iv(), cipherText()));
   if ( key() !== "" && iv() !== "") {
   document.getElementById("result_d")!.textContent = resultD();
   }

   if (resultD() === "") {
      document.getElementById("result_d")!.textContent = "Enter Cipher Text";
   }
});


// condition for copy and show encryption
createEffect(() => {
   if(resultE() !== "IV is not 16 Characters" &&
      resultE() !== "Key is not 16 Characters" &&
      resultE() !== "") {
      (document.getElementById("result_e")! as HTMLInputElement).disabled  = false;
   } else{
      (document.getElementById("result_e")! as HTMLInputElement).disabled  = true;;
   }
});


// condition for copy and show decryption
createEffect(() => {
   if(resultD() !== "IV is not 16 Characters" &&
      resultD() !== "Key is not 16 Characters" &&
      resultD() !== "Invalid Credentials"&&
      resultD() !== "") {
      (document.getElementById("result_d")! as HTMLInputElement).disabled  = false;
   } else{
      (document.getElementById("result_d")! as HTMLInputElement).disabled  = true;
   }
});

// copy encryption and decryption
document.getElementById("encryption")!.addEventListener("click",(e)=>{
   if((e!.target as HTMLInputElement).matches("#result_e") &&
      ((document.getElementById("result_e")! as HTMLInputElement).disabled  === false )){
      navigator.clipboard.writeText(resultE());  
      showToast();
   }

   if((e!.target as HTMLInputElement).matches("#result_d") &&
      ((document.getElementById("result_d")! as HTMLInputElement).disabled  === false )){
      navigator.clipboard.writeText(resultD());  
      showToast();
   }
});


</script>



<style is:global>


#enc:after { content: 'Encrypt';}
#dec:after { content: 'Decrypt';}

:root:has(#enc:checked) { 
	#cenc{display: block;} 
	#encdec {transform: translate3d(-5ch, 0, 0);}
}

:root:has(#dec:checked) {
 #cdec {display: block;} 
 #encdec { transform: translate3d(5ch, 0, 0);}
}

</style>