---
import Dialog from './ui/Dialog.astro';
---

<Dialog identifier= 'create-vault-dialog'>

    <h3 style="margin-top: 0;">Create vault</h3>

    <p class="hint" id="vault-hint"></p>

    <input type="text" name="vault-name" id="vault-name-input">

    <div class="flex-center-childs" style="gap:var(--size-sm0);margin-top:var(--size-sm3);">
        <button class="unstyle-button not-prose max-width" >Cancel</button>
        <button class="max-width" id="create-vault-button" disabled>Create</button>
    </div>

</Dialog> 

<Dialog identifier= 'delete-vault-dialog'>

    <h3 style="margin-top: 0;">Delete vault</h3>

    <select name="delete vaults" class="max-width prose" id="delete-vault-list" > </select>

    <div class="flex-center-childs" style="gap:var(--size-sm0);margin-top:var(--size-sm3);"> 
        <button class="unstyle-button not-prose max-width" >Cancel</button>
        <button class="max-width" id="delete-vault-button" style="--primary:62.31% 0.246 27" disabled>Delete</button>
    </div>

</Dialog>

<script>

import { element } from "../utils/elementUtils";
import { dbCreate, dbUpdate} from "../utils/surrealdb-indexed"
import { records } from "../logic/records"


(async () => {

    const createVaultButton  = (await element.wait("#create-vault-button")) as HTMLButtonElement
    const deleteVaultButton  = (await element.wait("#delete-vault-button")) as HTMLButtonElement
    const selectDeleteVaults = (await element.wait("#delete-vault-list"))   as HTMLSelectElement;

    document.getElementById("create-vault-dialog")!.addEventListener("input",(e)=>{
        if((e!.target as HTMLInputElement).matches("#vault-name-input")){
             records.setVaultName((e!.target as HTMLInputElement).value)
        };
    });

    document.getElementById("create-vault-dialog")!.addEventListener("click",(e)=>{
        if((e!.target as HTMLInputElement).matches("#create-vault-button")){

            (async () => {
                await dbCreate("Vaults:create", {
                    id:records.get("vaultName"),
                    name:records.get("vaultName"), 
                    updatedAt: new Date().toISOString(),
                    status: "available",
                    role: "owner" 
                });
                records.updateVaultsList();
            })();
        };
    });

    document.getElementById("delete-vault-dialog")!.addEventListener("click",(e)=>{
        if((e!.target as HTMLInputElement).matches("#delete-vault-button")){
            const id = selectDeleteVaults.options[selectDeleteVaults.selectedIndex]?.id;
            const value = selectDeleteVaults.options[selectDeleteVaults.selectedIndex]?.value;
            (async () => {
                await dbUpdate("Vaults:update", {
                    id:id, 
                    name: value,
                    updatedAt: new Date().toISOString(),
                    status:"deleted",
                    role: "owner"
                });

                records.updateVaultsList();
            })();
        };
    });

    records.on (["vaultName"], ({value}) => {createVaultButton.disabled = (value === "")});
    records.on (["editableVaultList"], ({value}) => {deleteVaultButton.disabled = (value.length === 0)});

})();


records.on(["vaultsList"], ({value}) => {

    //delete vaults list
    const deleteVaultlist = document.getElementById("delete-vault-list") as HTMLSelectElement
    deleteVaultlist.textContent = "";

    const fragment = document.createDocumentFragment();

    if (records.get("editableVaultList").length !== 0){
         (records.get("editableVaultList") ?? [])
         .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
         .forEach((entry) => {
            fragment.append( element.configure("option", {textContent:entry.name, id:entry.id?.id}));
        });
    }

    deleteVaultlist.append(fragment);

});

</script>