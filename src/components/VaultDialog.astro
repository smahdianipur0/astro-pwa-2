---
import Dialog from './ui/Dialog.astro';
---

<Dialog identifier= 'create-vault-dialog'>

  <h3 style="margin-top: 0;">Create vault</h3>
  <p class="hint" id="vault-hint"></p>

  <input type="text" name="vault-name" id="vault-name-input">
  <div class="flex-center-childs" style="gap:var(--gap);margin-top:var(--gap-x04);">
    
    <button class="unstyle-button not-prose max-width" >Cancel</button>
    <button class="max-width" id="create-vault-button" disabled>Create</button>
    
  </div>

</Dialog>

<Dialog identifier= 'delete-vault-dialog'>

  <h3 style="margin-top: 0;">Delete vault</h3>

  <select name="delete vaults" class="max-width prose" id="delete-vault-list" > </select>

  <div class="flex-center-childs" style="gap:var(--gap);margin-top:var(--gap-x04);"> 

    <button class="unstyle-button not-prose max-width" >Cancel</button>
    <button class="max-width" id="delete-vault-button" style="--primary:62.31% 0.246 27" disabled>Delete</button>
    
  </div>

</Dialog>

<script>

import { element } from "../utils/elementUtils";
import { createEffect } from "solid-js";
import { dbCreate, dbReadAll, dbUpdate} from "../utils/surrealdb-indexed"
import { createVaultName,   setCreateVaultName,
         vaultsList,        setVaultsList,
         editableVaultList, setEditableVaultList,
         creationAllowed,   setCreationAllowed,
         selectedVault,     setSelectedVault
        } from '../logic/records'



const intialvaults = await dbReadAll("Vaults");
if (intialvaults){setVaultsList(intialvaults);};


createEffect(() => { setEditableVaultList(vaultsList().filter(item => item.status === "available" && item.role === "owner")) });
createEffect(() => { setCreationAllowed(editableVaultList().length < 3) });

createEffect(() => { 
    (async () => {
        const vaultHint = (await element.wait("#vault-hint")) as HTMLElement;
        if (creationAllowed()){
            vaultHint.textContent = "You can create a new vault. You can have up to 3 vaults in total" 
        } else {
            vaultHint.textContent = "You already own 3 vaults, which is the maximum allowed. Need a new one? Try deleting an existing vault first."
        }
    })();
});

// bind SelectedVault signal
document.getElementById("credentials")!.addEventListener("change",(e)=>{
    if((e!.target as HTMLInputElement).matches("#vault-list")){
        setSelectedVault((e!.target as HTMLInputElement).value);
    };
});

(async () => {

    const createVaultButton  = (await element.wait("#create-vault-button")) as HTMLButtonElement
    const vaultNameInput     = (await element.wait("#vault-name-input"))    as HTMLInputElement
    const deleteVaultButton  = (await element.wait("#delete-vault-button")) as HTMLButtonElement
    const selectDeleteVaults = (await element.wait("#delete-vault-list"))   as HTMLSelectElement;


    document.getElementById("create-vault-dialog")!.addEventListener("input",(e)=>{
        if((e!.target as HTMLInputElement).matches("#vault-name-input")){
             setCreateVaultName((e!.target as HTMLInputElement).value)
        };
    });

    document.getElementById("create-vault-dialog")!.addEventListener("click",(e)=>{
        if((e!.target as HTMLInputElement).matches("#create-vault-button")){

            (async () => {
                await dbCreate("Vaults:create", {
                    id:createVaultName(),
                    name:createVaultName(), 
                    updatedAt: new Date().toISOString(),
                    status: "available",
                    role: "owner" 
                });
                const vaults = await dbReadAll("Vaults");
                if (vaults){setVaultsList(vaults)};
            })();
        };
    });

    document.getElementById("delete-vault-dialog")!.addEventListener("click",(e)=>{
        if((e!.target as HTMLInputElement).matches("#delete-vault-button")){
            const id = selectDeleteVaults.options[selectDeleteVaults.selectedIndex]?.id;
            const value = selectDeleteVaults.options[selectDeleteVaults.selectedIndex]?.value;
            (async () => {
                await dbUpdate("Vaults:update", {
                    id:id, 
                    name: value,
                    updatedAt: new Date().toISOString(),
                    status:"deleted",
                    role: "owner"
                });

                const vaults = await dbReadAll("Vaults");
                if (vaults){setVaultsList(vaults)};
            })();
        };
    });

    createEffect(() => { createVaultButton.disabled = (!creationAllowed() || createVaultName() === "")});
    createEffect(() => { vaultNameInput.disabled    = (!creationAllowed()) });
    createEffect(() => { deleteVaultButton.disabled = editableVaultList().length === 0});

})();

createEffect(() => { 

    //vaults list
    const vaultlist = document.getElementById("vault-list") as HTMLSelectElement
    vaultlist.textContent = "";
    vaultlist.disabled = false;

    const fragment = document.createDocumentFragment();

    if (vaultsList().filter(item => item.status === "available").length === 0){

        fragment.append(element.configure("option", {textContent: "No vaults found"}));
    } else { 
         (vaultsList() ?? [])
         .filter(item => item.status === "available")
         .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
         .forEach((entry) => {

            fragment.append( element.configure("option", {textContent:entry.id?.id }));
        });
    }
    vaultlist.append(fragment);


    //delete vaults list
    const deleteVaultlist = document.getElementById("delete-vault-list") as HTMLSelectElement
    deleteVaultlist.textContent = "";

    //vaults list for card creation
    const cardVaultlist = document.getElementById("select-vault-for-card") as HTMLSelectElement
    cardVaultlist.textContent = "";

    const fragment2 = document.createDocumentFragment();

    if (editableVaultList().length === 0){
        fragment2.append(element.configure("option", {textContent: "No vaults found"}));
    } else { 
         (editableVaultList() ?? [])
         .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
         .forEach((entry) => {

            fragment2.append( element.configure("option", {textContent:entry.name, id:entry.id?.id}));
        });
    }

    const fragment2Clone = fragment2.cloneNode(true);
    deleteVaultlist.append(fragment2);
    cardVaultlist.append(fragment2Clone);

});


</script>